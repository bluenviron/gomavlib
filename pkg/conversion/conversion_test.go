package conversion

import (
	"os"
	"testing"

	"github.com/stretchr/testify/require"
)

const testDialect = `<?xml version="1.0"?>
<mavlink>
  <version>0</version>
  <dialect>0</dialect>
  <enums>
    <enum name="A_TYPE">
      <description>Detected Anomaly Types.</description>
      <entry value="0" name="A">
        <description>A.</description>
      </entry>
      <entry value="1" name="B">
        <description>B.</description>
      </entry>
      <entry value="2" name="C">
        <description>C.</description>
      </entry>
      <entry value="3" name="D">
        <description>D.</description>
      </entry>
      <entry value="4" name="E">
        <description>E</description>
      </entry>
    </enum>
  </enums>
  <messages>
    <message id="43000" name="A_MESSAGE">
      <description>Detected anomaly info measured by onboard sensors and actuators. </description>
      <field type="uint8_t" name="test_uint8" enum="A_TYPE">a test uint8</field>
	  <field type="char[16]" name="Test_string">a test string</field>
	  <field type="uint32_t[4]" name="test_array">a test array</field>
	  <extensions/>
      <field type="uint8_t" name="mission_type" enum="MAV_MISSION_TYPE">a test extension</field>
    </message>
  </messages>
</mavlink>
`

var testDialectGo = `//autogenerated:yes
//nolint:revive,misspell,govet,lll
package testdialect
// Detected anomaly info measured by onboard sensors and actuators.
type MessageAMessage struct {
    // a test uint8
    TestUint8 A_TYPE ` + "`" + `mavenum:"uint8"` + "`" + `
    // a test string
    TestString string ` + "`" + `mavlen:"16" mavname:"Test_string"` + "`" + `
    // a test array
    TestArray [4]uint32
    // a test extension
    MissionType MAV_MISSION_TYPE ` + "`" + `mavenum:"uint8" mavext:"true"` + "`" + `
}

// GetID implements the message.Message interface.
func (*MessageAMessage) GetID() uint32 {
    return 43000
}
`

func TestConversion(t *testing.T) {
	dir, err := os.MkdirTemp("", "gomavlib")
	require.NoError(t, err)
	defer os.RemoveAll(dir)

	os.Chdir(dir)

	err = os.WriteFile("testdialect.xml", []byte(testDialect), 0o644)
	require.NoError(t, err)

	err = Convert("testdialect.xml", true)
	require.NoError(t, err)

	buf, err := os.ReadFile("testdialect/message_a_message.go")
	require.NoError(t, err)
	require.Equal(t, testDialectGo, string(buf))
}
