//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package ardupilotmega

import (
	"fmt"
	"strings"
)

type CAMERA_FEEDBACK_FLAGS uint32

const (
	// Shooting photos, not video.
	CAMERA_FEEDBACK_PHOTO CAMERA_FEEDBACK_FLAGS = 0
	// Shooting video, not stills.
	CAMERA_FEEDBACK_VIDEO CAMERA_FEEDBACK_FLAGS = 1
	// Unable to achieve requested exposure (e.g. shutter speed too low).
	CAMERA_FEEDBACK_BADEXPOSURE CAMERA_FEEDBACK_FLAGS = 2
	// Closed loop feedback from camera, we know for sure it has successfully taken a picture.
	CAMERA_FEEDBACK_CLOSEDLOOP CAMERA_FEEDBACK_FLAGS = 3
	// Open loop camera, an image trigger has been requested but we can't know for sure it has successfully taken a picture.
	CAMERA_FEEDBACK_OPENLOOP CAMERA_FEEDBACK_FLAGS = 4
)

var labels_CAMERA_FEEDBACK_FLAGS = map[CAMERA_FEEDBACK_FLAGS]string{
	CAMERA_FEEDBACK_PHOTO:       "CAMERA_FEEDBACK_PHOTO",
	CAMERA_FEEDBACK_VIDEO:       "CAMERA_FEEDBACK_VIDEO",
	CAMERA_FEEDBACK_BADEXPOSURE: "CAMERA_FEEDBACK_BADEXPOSURE",
	CAMERA_FEEDBACK_CLOSEDLOOP:  "CAMERA_FEEDBACK_CLOSEDLOOP",
	CAMERA_FEEDBACK_OPENLOOP:    "CAMERA_FEEDBACK_OPENLOOP",
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e CAMERA_FEEDBACK_FLAGS) MarshalText() ([]byte, error) {
	var names []string
	for mask, label := range labels_CAMERA_FEEDBACK_FLAGS {
		if e&mask == mask {
			names = append(names, label)
		}
	}
	return []byte(strings.Join(names, " | ")), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *CAMERA_FEEDBACK_FLAGS) UnmarshalText(text []byte) error {
	labels := strings.Split(string(text), " | ")
	var mask CAMERA_FEEDBACK_FLAGS
	for _, label := range labels {
		found := false
		for value, l := range labels_CAMERA_FEEDBACK_FLAGS {
			if l == label {
				mask |= value
				found = true
				break
			}
		}
		if !found {
			return fmt.Errorf("invalid label '%s'", label)
		}
	}
	*e = mask
	return nil
}

// String implements the fmt.Stringer interface.
func (e CAMERA_FEEDBACK_FLAGS) String() string {
	val, _ := e.MarshalText()
	return string(val)
}
