//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package ardupilotmega

import (
	"fmt"
	"strings"
)

// Deepstall flight stage.
type DEEPSTALL_STAGE uint32

const (
	// Flying to the landing point.
	DEEPSTALL_STAGE_FLY_TO_LANDING DEEPSTALL_STAGE = 0
	// Building an estimate of the wind.
	DEEPSTALL_STAGE_ESTIMATE_WIND DEEPSTALL_STAGE = 1
	// Waiting to breakout of the loiter to fly the approach.
	DEEPSTALL_STAGE_WAIT_FOR_BREAKOUT DEEPSTALL_STAGE = 2
	// Flying to the first arc point to turn around to the landing point.
	DEEPSTALL_STAGE_FLY_TO_ARC DEEPSTALL_STAGE = 3
	// Turning around back to the deepstall landing point.
	DEEPSTALL_STAGE_ARC DEEPSTALL_STAGE = 4
	// Approaching the landing point.
	DEEPSTALL_STAGE_APPROACH DEEPSTALL_STAGE = 5
	// Stalling and steering towards the land point.
	DEEPSTALL_STAGE_LAND DEEPSTALL_STAGE = 6
)

var labels_DEEPSTALL_STAGE = map[DEEPSTALL_STAGE]string{
	DEEPSTALL_STAGE_FLY_TO_LANDING:    "DEEPSTALL_STAGE_FLY_TO_LANDING",
	DEEPSTALL_STAGE_ESTIMATE_WIND:     "DEEPSTALL_STAGE_ESTIMATE_WIND",
	DEEPSTALL_STAGE_WAIT_FOR_BREAKOUT: "DEEPSTALL_STAGE_WAIT_FOR_BREAKOUT",
	DEEPSTALL_STAGE_FLY_TO_ARC:        "DEEPSTALL_STAGE_FLY_TO_ARC",
	DEEPSTALL_STAGE_ARC:               "DEEPSTALL_STAGE_ARC",
	DEEPSTALL_STAGE_APPROACH:          "DEEPSTALL_STAGE_APPROACH",
	DEEPSTALL_STAGE_LAND:              "DEEPSTALL_STAGE_LAND",
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e DEEPSTALL_STAGE) MarshalText() ([]byte, error) {
	var names []string
	for mask, label := range labels_DEEPSTALL_STAGE {
		if e&mask == mask {
			names = append(names, label)
		}
	}
	return []byte(strings.Join(names, " | ")), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *DEEPSTALL_STAGE) UnmarshalText(text []byte) error {
	labels := strings.Split(string(text), " | ")
	var mask DEEPSTALL_STAGE
	for _, label := range labels {
		found := false
		for value, l := range labels_DEEPSTALL_STAGE {
			if l == label {
				mask |= value
				found = true
				break
			}
		}
		if !found {
			return fmt.Errorf("invalid label '%s'", label)
		}
	}
	*e = mask
	return nil
}

// String implements the fmt.Stringer interface.
func (e DEEPSTALL_STAGE) String() string {
	val, _ := e.MarshalText()
	return string(val)
}
