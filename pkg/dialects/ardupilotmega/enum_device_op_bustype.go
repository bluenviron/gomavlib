//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package ardupilotmega

import (
	"fmt"
	"strings"
)

// Bus types for device operations.
type DEVICE_OP_BUSTYPE uint32

const (
	// I2C Device operation.
	DEVICE_OP_BUSTYPE_I2C DEVICE_OP_BUSTYPE = 0
	// SPI Device operation.
	DEVICE_OP_BUSTYPE_SPI DEVICE_OP_BUSTYPE = 1
)

var labels_DEVICE_OP_BUSTYPE = map[DEVICE_OP_BUSTYPE]string{
	DEVICE_OP_BUSTYPE_I2C: "DEVICE_OP_BUSTYPE_I2C",
	DEVICE_OP_BUSTYPE_SPI: "DEVICE_OP_BUSTYPE_SPI",
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e DEVICE_OP_BUSTYPE) MarshalText() ([]byte, error) {
	var names []string
	for mask, label := range labels_DEVICE_OP_BUSTYPE {
		if e&mask == mask {
			names = append(names, label)
		}
	}
	return []byte(strings.Join(names, " | ")), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *DEVICE_OP_BUSTYPE) UnmarshalText(text []byte) error {
	labels := strings.Split(string(text), " | ")
	var mask DEVICE_OP_BUSTYPE
	for _, label := range labels {
		found := false
		for value, l := range labels_DEVICE_OP_BUSTYPE {
			if l == label {
				mask |= value
				found = true
				break
			}
		}
		if !found {
			return fmt.Errorf("invalid label '%s'", label)
		}
	}
	*e = mask
	return nil
}

// String implements the fmt.Stringer interface.
func (e DEVICE_OP_BUSTYPE) String() string {
	val, _ := e.MarshalText()
	return string(val)
}
