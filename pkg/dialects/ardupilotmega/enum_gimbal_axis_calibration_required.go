//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package ardupilotmega

import (
	"fmt"
	"strings"
)

type GIMBAL_AXIS_CALIBRATION_REQUIRED uint32

const (
	// Whether or not this axis requires calibration is unknown at this time.
	GIMBAL_AXIS_CALIBRATION_REQUIRED_UNKNOWN GIMBAL_AXIS_CALIBRATION_REQUIRED = 0
	// This axis requires calibration.
	GIMBAL_AXIS_CALIBRATION_REQUIRED_TRUE GIMBAL_AXIS_CALIBRATION_REQUIRED = 1
	// This axis does not require calibration.
	GIMBAL_AXIS_CALIBRATION_REQUIRED_FALSE GIMBAL_AXIS_CALIBRATION_REQUIRED = 2
)

var labels_GIMBAL_AXIS_CALIBRATION_REQUIRED = map[GIMBAL_AXIS_CALIBRATION_REQUIRED]string{
	GIMBAL_AXIS_CALIBRATION_REQUIRED_UNKNOWN: "GIMBAL_AXIS_CALIBRATION_REQUIRED_UNKNOWN",
	GIMBAL_AXIS_CALIBRATION_REQUIRED_TRUE:    "GIMBAL_AXIS_CALIBRATION_REQUIRED_TRUE",
	GIMBAL_AXIS_CALIBRATION_REQUIRED_FALSE:   "GIMBAL_AXIS_CALIBRATION_REQUIRED_FALSE",
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e GIMBAL_AXIS_CALIBRATION_REQUIRED) MarshalText() ([]byte, error) {
	var names []string
	for mask, label := range labels_GIMBAL_AXIS_CALIBRATION_REQUIRED {
		if e&mask == mask {
			names = append(names, label)
		}
	}
	return []byte(strings.Join(names, " | ")), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *GIMBAL_AXIS_CALIBRATION_REQUIRED) UnmarshalText(text []byte) error {
	labels := strings.Split(string(text), " | ")
	var mask GIMBAL_AXIS_CALIBRATION_REQUIRED
	for _, label := range labels {
		found := false
		for value, l := range labels_GIMBAL_AXIS_CALIBRATION_REQUIRED {
			if l == label {
				mask |= value
				found = true
				break
			}
		}
		if !found {
			return fmt.Errorf("invalid label '%s'", label)
		}
	}
	*e = mask
	return nil
}

// String implements the fmt.Stringer interface.
func (e GIMBAL_AXIS_CALIBRATION_REQUIRED) String() string {
	val, _ := e.MarshalText()
	return string(val)
}
