//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package ardupilotmega

import (
	"fmt"
	"strings"
)

type GOPRO_HEARTBEAT_STATUS uint32

const (
	// No GoPro connected.
	GOPRO_HEARTBEAT_STATUS_DISCONNECTED GOPRO_HEARTBEAT_STATUS = 0
	// The detected GoPro is not HeroBus compatible.
	GOPRO_HEARTBEAT_STATUS_INCOMPATIBLE GOPRO_HEARTBEAT_STATUS = 1
	// A HeroBus compatible GoPro is connected.
	GOPRO_HEARTBEAT_STATUS_CONNECTED GOPRO_HEARTBEAT_STATUS = 2
	// An unrecoverable error was encountered with the connected GoPro, it may require a power cycle.
	GOPRO_HEARTBEAT_STATUS_ERROR GOPRO_HEARTBEAT_STATUS = 3
)

var labels_GOPRO_HEARTBEAT_STATUS = map[GOPRO_HEARTBEAT_STATUS]string{
	GOPRO_HEARTBEAT_STATUS_DISCONNECTED: "GOPRO_HEARTBEAT_STATUS_DISCONNECTED",
	GOPRO_HEARTBEAT_STATUS_INCOMPATIBLE: "GOPRO_HEARTBEAT_STATUS_INCOMPATIBLE",
	GOPRO_HEARTBEAT_STATUS_CONNECTED:    "GOPRO_HEARTBEAT_STATUS_CONNECTED",
	GOPRO_HEARTBEAT_STATUS_ERROR:        "GOPRO_HEARTBEAT_STATUS_ERROR",
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e GOPRO_HEARTBEAT_STATUS) MarshalText() ([]byte, error) {
	var names []string
	for mask, label := range labels_GOPRO_HEARTBEAT_STATUS {
		if e&mask == mask {
			names = append(names, label)
		}
	}
	return []byte(strings.Join(names, " | ")), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *GOPRO_HEARTBEAT_STATUS) UnmarshalText(text []byte) error {
	labels := strings.Split(string(text), " | ")
	var mask GOPRO_HEARTBEAT_STATUS
	for _, label := range labels {
		found := false
		for value, l := range labels_GOPRO_HEARTBEAT_STATUS {
			if l == label {
				mask |= value
				found = true
				break
			}
		}
		if !found {
			return fmt.Errorf("invalid label '%s'", label)
		}
	}
	*e = mask
	return nil
}

// String implements the fmt.Stringer interface.
func (e GOPRO_HEARTBEAT_STATUS) String() string {
	val, _ := e.MarshalText()
	return string(val)
}
