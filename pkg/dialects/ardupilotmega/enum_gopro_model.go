//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package ardupilotmega

import (
	"fmt"
	"strings"
)

type GOPRO_MODEL uint32

const (
	// Unknown gopro model.
	GOPRO_MODEL_UNKNOWN GOPRO_MODEL = 0
	// Hero 3+ Silver (HeroBus not supported by GoPro).
	GOPRO_MODEL_HERO_3_PLUS_SILVER GOPRO_MODEL = 1
	// Hero 3+ Black.
	GOPRO_MODEL_HERO_3_PLUS_BLACK GOPRO_MODEL = 2
	// Hero 4 Silver.
	GOPRO_MODEL_HERO_4_SILVER GOPRO_MODEL = 3
	// Hero 4 Black.
	GOPRO_MODEL_HERO_4_BLACK GOPRO_MODEL = 4
)

var labels_GOPRO_MODEL = map[GOPRO_MODEL]string{
	GOPRO_MODEL_UNKNOWN:            "GOPRO_MODEL_UNKNOWN",
	GOPRO_MODEL_HERO_3_PLUS_SILVER: "GOPRO_MODEL_HERO_3_PLUS_SILVER",
	GOPRO_MODEL_HERO_3_PLUS_BLACK:  "GOPRO_MODEL_HERO_3_PLUS_BLACK",
	GOPRO_MODEL_HERO_4_SILVER:      "GOPRO_MODEL_HERO_4_SILVER",
	GOPRO_MODEL_HERO_4_BLACK:       "GOPRO_MODEL_HERO_4_BLACK",
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e GOPRO_MODEL) MarshalText() ([]byte, error) {
	var names []string
	for mask, label := range labels_GOPRO_MODEL {
		if e&mask == mask {
			names = append(names, label)
		}
	}
	return []byte(strings.Join(names, " | ")), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *GOPRO_MODEL) UnmarshalText(text []byte) error {
	labels := strings.Split(string(text), " | ")
	var mask GOPRO_MODEL
	for _, label := range labels {
		found := false
		for value, l := range labels_GOPRO_MODEL {
			if l == label {
				mask |= value
				found = true
				break
			}
		}
		if !found {
			return fmt.Errorf("invalid label '%s'", label)
		}
	}
	*e = mask
	return nil
}

// String implements the fmt.Stringer interface.
func (e GOPRO_MODEL) String() string {
	val, _ := e.MarshalText()
	return string(val)
}
