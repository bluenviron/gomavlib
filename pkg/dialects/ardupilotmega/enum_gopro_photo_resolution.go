//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package ardupilotmega

import (
	"fmt"
	"strings"
)

type GOPRO_PHOTO_RESOLUTION uint32

const (
	// 5MP Medium.
	GOPRO_PHOTO_RESOLUTION_5MP_MEDIUM GOPRO_PHOTO_RESOLUTION = 0
	// 7MP Medium.
	GOPRO_PHOTO_RESOLUTION_7MP_MEDIUM GOPRO_PHOTO_RESOLUTION = 1
	// 7MP Wide.
	GOPRO_PHOTO_RESOLUTION_7MP_WIDE GOPRO_PHOTO_RESOLUTION = 2
	// 10MP Wide.
	GOPRO_PHOTO_RESOLUTION_10MP_WIDE GOPRO_PHOTO_RESOLUTION = 3
	// 12MP Wide.
	GOPRO_PHOTO_RESOLUTION_12MP_WIDE GOPRO_PHOTO_RESOLUTION = 4
)

var labels_GOPRO_PHOTO_RESOLUTION = map[GOPRO_PHOTO_RESOLUTION]string{
	GOPRO_PHOTO_RESOLUTION_5MP_MEDIUM: "GOPRO_PHOTO_RESOLUTION_5MP_MEDIUM",
	GOPRO_PHOTO_RESOLUTION_7MP_MEDIUM: "GOPRO_PHOTO_RESOLUTION_7MP_MEDIUM",
	GOPRO_PHOTO_RESOLUTION_7MP_WIDE:   "GOPRO_PHOTO_RESOLUTION_7MP_WIDE",
	GOPRO_PHOTO_RESOLUTION_10MP_WIDE:  "GOPRO_PHOTO_RESOLUTION_10MP_WIDE",
	GOPRO_PHOTO_RESOLUTION_12MP_WIDE:  "GOPRO_PHOTO_RESOLUTION_12MP_WIDE",
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e GOPRO_PHOTO_RESOLUTION) MarshalText() ([]byte, error) {
	var names []string
	for mask, label := range labels_GOPRO_PHOTO_RESOLUTION {
		if e&mask == mask {
			names = append(names, label)
		}
	}
	return []byte(strings.Join(names, " | ")), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *GOPRO_PHOTO_RESOLUTION) UnmarshalText(text []byte) error {
	labels := strings.Split(string(text), " | ")
	var mask GOPRO_PHOTO_RESOLUTION
	for _, label := range labels {
		found := false
		for value, l := range labels_GOPRO_PHOTO_RESOLUTION {
			if l == label {
				mask |= value
				found = true
				break
			}
		}
		if !found {
			return fmt.Errorf("invalid label '%s'", label)
		}
	}
	*e = mask
	return nil
}

// String implements the fmt.Stringer interface.
func (e GOPRO_PHOTO_RESOLUTION) String() string {
	val, _ := e.MarshalText()
	return string(val)
}
