//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package ardupilotmega

import (
	"fmt"
	"strconv"
)

type GOPRO_PROTUNE_COLOUR uint64

const (
	// Auto.
	GOPRO_PROTUNE_COLOUR_STANDARD GOPRO_PROTUNE_COLOUR = 0
	// Neutral.
	GOPRO_PROTUNE_COLOUR_NEUTRAL GOPRO_PROTUNE_COLOUR = 1
)

var labels_GOPRO_PROTUNE_COLOUR = map[GOPRO_PROTUNE_COLOUR]string{
	GOPRO_PROTUNE_COLOUR_STANDARD: "GOPRO_PROTUNE_COLOUR_STANDARD",
	GOPRO_PROTUNE_COLOUR_NEUTRAL:  "GOPRO_PROTUNE_COLOUR_NEUTRAL",
}

var values_GOPRO_PROTUNE_COLOUR = map[string]GOPRO_PROTUNE_COLOUR{
	"GOPRO_PROTUNE_COLOUR_STANDARD": GOPRO_PROTUNE_COLOUR_STANDARD,
	"GOPRO_PROTUNE_COLOUR_NEUTRAL":  GOPRO_PROTUNE_COLOUR_NEUTRAL,
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e GOPRO_PROTUNE_COLOUR) MarshalText() ([]byte, error) {
	if name, ok := labels_GOPRO_PROTUNE_COLOUR[e]; ok {
		return []byte(name), nil
	}
	return []byte(strconv.Itoa(int(e))), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *GOPRO_PROTUNE_COLOUR) UnmarshalText(text []byte) error {
	if value, ok := values_GOPRO_PROTUNE_COLOUR[string(text)]; ok {
		*e = value
	} else if value, err := strconv.Atoi(string(text)); err == nil {
		*e = GOPRO_PROTUNE_COLOUR(value)
	} else {
		return fmt.Errorf("invalid label '%s'", text)
	}
	return nil
}

// String implements the fmt.Stringer interface.
func (e GOPRO_PROTUNE_COLOUR) String() string {
	val, _ := e.MarshalText()
	return string(val)
}
