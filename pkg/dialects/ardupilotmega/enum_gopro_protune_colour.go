//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package ardupilotmega

import (
	"fmt"
	"strings"
)

type GOPRO_PROTUNE_COLOUR uint32

const (
	// Auto.
	GOPRO_PROTUNE_COLOUR_STANDARD GOPRO_PROTUNE_COLOUR = 0
	// Neutral.
	GOPRO_PROTUNE_COLOUR_NEUTRAL GOPRO_PROTUNE_COLOUR = 1
)

var labels_GOPRO_PROTUNE_COLOUR = map[GOPRO_PROTUNE_COLOUR]string{
	GOPRO_PROTUNE_COLOUR_STANDARD: "GOPRO_PROTUNE_COLOUR_STANDARD",
	GOPRO_PROTUNE_COLOUR_NEUTRAL:  "GOPRO_PROTUNE_COLOUR_NEUTRAL",
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e GOPRO_PROTUNE_COLOUR) MarshalText() ([]byte, error) {
	var names []string
	for mask, label := range labels_GOPRO_PROTUNE_COLOUR {
		if e&mask == mask {
			names = append(names, label)
		}
	}
	return []byte(strings.Join(names, " | ")), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *GOPRO_PROTUNE_COLOUR) UnmarshalText(text []byte) error {
	labels := strings.Split(string(text), " | ")
	var mask GOPRO_PROTUNE_COLOUR
	for _, label := range labels {
		found := false
		for value, l := range labels_GOPRO_PROTUNE_COLOUR {
			if l == label {
				mask |= value
				found = true
				break
			}
		}
		if !found {
			return fmt.Errorf("invalid label '%s'", label)
		}
	}
	*e = mask
	return nil
}

// String implements the fmt.Stringer interface.
func (e GOPRO_PROTUNE_COLOUR) String() string {
	val, _ := e.MarshalText()
	return string(val)
}
