//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package ardupilotmega

import (
	"fmt"
	"strings"
)

type GOPRO_PROTUNE_GAIN uint32

const (
	// ISO 400.
	GOPRO_PROTUNE_GAIN_400 GOPRO_PROTUNE_GAIN = 0
	// ISO 800 (Only Hero 4).
	GOPRO_PROTUNE_GAIN_800 GOPRO_PROTUNE_GAIN = 1
	// ISO 1600.
	GOPRO_PROTUNE_GAIN_1600 GOPRO_PROTUNE_GAIN = 2
	// ISO 3200 (Only Hero 4).
	GOPRO_PROTUNE_GAIN_3200 GOPRO_PROTUNE_GAIN = 3
	// ISO 6400.
	GOPRO_PROTUNE_GAIN_6400 GOPRO_PROTUNE_GAIN = 4
)

var labels_GOPRO_PROTUNE_GAIN = map[GOPRO_PROTUNE_GAIN]string{
	GOPRO_PROTUNE_GAIN_400:  "GOPRO_PROTUNE_GAIN_400",
	GOPRO_PROTUNE_GAIN_800:  "GOPRO_PROTUNE_GAIN_800",
	GOPRO_PROTUNE_GAIN_1600: "GOPRO_PROTUNE_GAIN_1600",
	GOPRO_PROTUNE_GAIN_3200: "GOPRO_PROTUNE_GAIN_3200",
	GOPRO_PROTUNE_GAIN_6400: "GOPRO_PROTUNE_GAIN_6400",
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e GOPRO_PROTUNE_GAIN) MarshalText() ([]byte, error) {
	var names []string
	for mask, label := range labels_GOPRO_PROTUNE_GAIN {
		if e&mask == mask {
			names = append(names, label)
		}
	}
	return []byte(strings.Join(names, " | ")), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *GOPRO_PROTUNE_GAIN) UnmarshalText(text []byte) error {
	labels := strings.Split(string(text), " | ")
	var mask GOPRO_PROTUNE_GAIN
	for _, label := range labels {
		found := false
		for value, l := range labels_GOPRO_PROTUNE_GAIN {
			if l == label {
				mask |= value
				found = true
				break
			}
		}
		if !found {
			return fmt.Errorf("invalid label '%s'", label)
		}
	}
	*e = mask
	return nil
}

// String implements the fmt.Stringer interface.
func (e GOPRO_PROTUNE_GAIN) String() string {
	val, _ := e.MarshalText()
	return string(val)
}
