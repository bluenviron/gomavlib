//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package ardupilotmega

import (
	"fmt"
	"strings"
)

type LED_CONTROL_PATTERN uint32

const (
	// LED patterns off (return control to regular vehicle control).
	LED_CONTROL_PATTERN_OFF LED_CONTROL_PATTERN = 0
	// LEDs show pattern during firmware update.
	LED_CONTROL_PATTERN_FIRMWAREUPDATE LED_CONTROL_PATTERN = 1
	// Custom Pattern using custom bytes fields.
	LED_CONTROL_PATTERN_CUSTOM LED_CONTROL_PATTERN = 255
)

var labels_LED_CONTROL_PATTERN = map[LED_CONTROL_PATTERN]string{
	LED_CONTROL_PATTERN_OFF:            "LED_CONTROL_PATTERN_OFF",
	LED_CONTROL_PATTERN_FIRMWAREUPDATE: "LED_CONTROL_PATTERN_FIRMWAREUPDATE",
	LED_CONTROL_PATTERN_CUSTOM:         "LED_CONTROL_PATTERN_CUSTOM",
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e LED_CONTROL_PATTERN) MarshalText() ([]byte, error) {
	var names []string
	for mask, label := range labels_LED_CONTROL_PATTERN {
		if e&mask == mask {
			names = append(names, label)
		}
	}
	return []byte(strings.Join(names, " | ")), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *LED_CONTROL_PATTERN) UnmarshalText(text []byte) error {
	labels := strings.Split(string(text), " | ")
	var mask LED_CONTROL_PATTERN
	for _, label := range labels {
		found := false
		for value, l := range labels_LED_CONTROL_PATTERN {
			if l == label {
				mask |= value
				found = true
				break
			}
		}
		if !found {
			return fmt.Errorf("invalid label '%s'", label)
		}
	}
	*e = mask
	return nil
}

// String implements the fmt.Stringer interface.
func (e LED_CONTROL_PATTERN) String() string {
	val, _ := e.MarshalText()
	return string(val)
}
