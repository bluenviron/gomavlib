//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package ardupilotmega

import (
	"fmt"
	"strings"
)

type LIMIT_MODULE uint32

const (
	// Pre-initialization.
	LIMIT_GPSLOCK LIMIT_MODULE = 1
	// Disabled.
	LIMIT_GEOFENCE LIMIT_MODULE = 2
	// Checking limits.
	LIMIT_ALTITUDE LIMIT_MODULE = 4
)

var labels_LIMIT_MODULE = map[LIMIT_MODULE]string{
	LIMIT_GPSLOCK:  "LIMIT_GPSLOCK",
	LIMIT_GEOFENCE: "LIMIT_GEOFENCE",
	LIMIT_ALTITUDE: "LIMIT_ALTITUDE",
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e LIMIT_MODULE) MarshalText() ([]byte, error) {
	var names []string
	for mask, label := range labels_LIMIT_MODULE {
		if e&mask == mask {
			names = append(names, label)
		}
	}
	return []byte(strings.Join(names, " | ")), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *LIMIT_MODULE) UnmarshalText(text []byte) error {
	labels := strings.Split(string(text), " | ")
	var mask LIMIT_MODULE
	for _, label := range labels {
		found := false
		for value, l := range labels_LIMIT_MODULE {
			if l == label {
				mask |= value
				found = true
				break
			}
		}
		if !found {
			return fmt.Errorf("invalid label '%s'", label)
		}
	}
	*e = mask
	return nil
}

// String implements the fmt.Stringer interface.
func (e LIMIT_MODULE) String() string {
	val, _ := e.MarshalText()
	return string(val)
}
