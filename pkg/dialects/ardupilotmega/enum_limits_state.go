//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package ardupilotmega

import (
	"fmt"
	"strings"
)

type LIMITS_STATE uint32

const (
	// Pre-initialization.
	LIMITS_INIT LIMITS_STATE = 0
	// Disabled.
	LIMITS_DISABLED LIMITS_STATE = 1
	// Checking limits.
	LIMITS_ENABLED LIMITS_STATE = 2
	// A limit has been breached.
	LIMITS_TRIGGERED LIMITS_STATE = 3
	// Taking action e.g. Return/RTL.
	LIMITS_RECOVERING LIMITS_STATE = 4
	// We're no longer in breach of a limit.
	LIMITS_RECOVERED LIMITS_STATE = 5
)

var labels_LIMITS_STATE = map[LIMITS_STATE]string{
	LIMITS_INIT:       "LIMITS_INIT",
	LIMITS_DISABLED:   "LIMITS_DISABLED",
	LIMITS_ENABLED:    "LIMITS_ENABLED",
	LIMITS_TRIGGERED:  "LIMITS_TRIGGERED",
	LIMITS_RECOVERING: "LIMITS_RECOVERING",
	LIMITS_RECOVERED:  "LIMITS_RECOVERED",
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e LIMITS_STATE) MarshalText() ([]byte, error) {
	var names []string
	for mask, label := range labels_LIMITS_STATE {
		if e&mask == mask {
			names = append(names, label)
		}
	}
	return []byte(strings.Join(names, " | ")), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *LIMITS_STATE) UnmarshalText(text []byte) error {
	labels := strings.Split(string(text), " | ")
	var mask LIMITS_STATE
	for _, label := range labels {
		found := false
		for value, l := range labels_LIMITS_STATE {
			if l == label {
				mask |= value
				found = true
				break
			}
		}
		if !found {
			return fmt.Errorf("invalid label '%s'", label)
		}
	}
	*e = mask
	return nil
}

// String implements the fmt.Stringer interface.
func (e LIMITS_STATE) String() string {
	val, _ := e.MarshalText()
	return string(val)
}
