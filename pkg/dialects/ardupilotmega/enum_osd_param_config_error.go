//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package ardupilotmega

import (
	"fmt"
	"strings"
)

// The error type for the OSD parameter editor.
type OSD_PARAM_CONFIG_ERROR uint32

const (
	OSD_PARAM_SUCCESS                 OSD_PARAM_CONFIG_ERROR = 0
	OSD_PARAM_INVALID_SCREEN          OSD_PARAM_CONFIG_ERROR = 1
	OSD_PARAM_INVALID_PARAMETER_INDEX OSD_PARAM_CONFIG_ERROR = 2
	OSD_PARAM_INVALID_PARAMETER       OSD_PARAM_CONFIG_ERROR = 3
)

var labels_OSD_PARAM_CONFIG_ERROR = map[OSD_PARAM_CONFIG_ERROR]string{
	OSD_PARAM_SUCCESS:                 "OSD_PARAM_SUCCESS",
	OSD_PARAM_INVALID_SCREEN:          "OSD_PARAM_INVALID_SCREEN",
	OSD_PARAM_INVALID_PARAMETER_INDEX: "OSD_PARAM_INVALID_PARAMETER_INDEX",
	OSD_PARAM_INVALID_PARAMETER:       "OSD_PARAM_INVALID_PARAMETER",
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e OSD_PARAM_CONFIG_ERROR) MarshalText() ([]byte, error) {
	var names []string
	for mask, label := range labels_OSD_PARAM_CONFIG_ERROR {
		if e&mask == mask {
			names = append(names, label)
		}
	}
	return []byte(strings.Join(names, " | ")), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *OSD_PARAM_CONFIG_ERROR) UnmarshalText(text []byte) error {
	labels := strings.Split(string(text), " | ")
	var mask OSD_PARAM_CONFIG_ERROR
	for _, label := range labels {
		found := false
		for value, l := range labels_OSD_PARAM_CONFIG_ERROR {
			if l == label {
				mask |= value
				found = true
				break
			}
		}
		if !found {
			return fmt.Errorf("invalid label '%s'", label)
		}
	}
	*e = mask
	return nil
}

// String implements the fmt.Stringer interface.
func (e OSD_PARAM_CONFIG_ERROR) String() string {
	val, _ := e.MarshalText()
	return string(val)
}
