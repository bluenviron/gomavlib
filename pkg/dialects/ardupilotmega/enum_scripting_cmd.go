//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package ardupilotmega

import (
	"fmt"
	"strings"
)

type SCRIPTING_CMD uint32

const (
	// Start a REPL session.
	SCRIPTING_CMD_REPL_START SCRIPTING_CMD = 0
	// End a REPL session.
	SCRIPTING_CMD_REPL_STOP SCRIPTING_CMD = 1
	// Stop execution of scripts.
	SCRIPTING_CMD_STOP SCRIPTING_CMD = 2
	// Stop execution of scripts and restart.
	SCRIPTING_CMD_STOP_AND_RESTART SCRIPTING_CMD = 3
)

var labels_SCRIPTING_CMD = map[SCRIPTING_CMD]string{
	SCRIPTING_CMD_REPL_START:       "SCRIPTING_CMD_REPL_START",
	SCRIPTING_CMD_REPL_STOP:        "SCRIPTING_CMD_REPL_STOP",
	SCRIPTING_CMD_STOP:             "SCRIPTING_CMD_STOP",
	SCRIPTING_CMD_STOP_AND_RESTART: "SCRIPTING_CMD_STOP_AND_RESTART",
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e SCRIPTING_CMD) MarshalText() ([]byte, error) {
	var names []string
	for mask, label := range labels_SCRIPTING_CMD {
		if e&mask == mask {
			names = append(names, label)
		}
	}
	return []byte(strings.Join(names, " | ")), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *SCRIPTING_CMD) UnmarshalText(text []byte) error {
	labels := strings.Split(string(text), " | ")
	var mask SCRIPTING_CMD
	for _, label := range labels {
		found := false
		for value, l := range labels_SCRIPTING_CMD {
			if l == label {
				mask |= value
				found = true
				break
			}
		}
		if !found {
			return fmt.Errorf("invalid label '%s'", label)
		}
	}
	*e = mask
	return nil
}

// String implements the fmt.Stringer interface.
func (e SCRIPTING_CMD) String() string {
	val, _ := e.MarshalText()
	return string(val)
}
