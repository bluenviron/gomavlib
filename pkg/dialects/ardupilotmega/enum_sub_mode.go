//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package ardupilotmega

import (
	"fmt"
	"strings"
)

// A mapping of sub flight modes for custom_mode field of heartbeat.
type SUB_MODE uint32

const (
	SUB_MODE_STABILIZE SUB_MODE = 0
	SUB_MODE_ACRO      SUB_MODE = 1
	SUB_MODE_ALT_HOLD  SUB_MODE = 2
	SUB_MODE_AUTO      SUB_MODE = 3
	SUB_MODE_GUIDED    SUB_MODE = 4
	SUB_MODE_CIRCLE    SUB_MODE = 7
	SUB_MODE_SURFACE   SUB_MODE = 9
	SUB_MODE_POSHOLD   SUB_MODE = 16
	SUB_MODE_MANUAL    SUB_MODE = 19
)

var labels_SUB_MODE = map[SUB_MODE]string{
	SUB_MODE_STABILIZE: "SUB_MODE_STABILIZE",
	SUB_MODE_ACRO:      "SUB_MODE_ACRO",
	SUB_MODE_ALT_HOLD:  "SUB_MODE_ALT_HOLD",
	SUB_MODE_AUTO:      "SUB_MODE_AUTO",
	SUB_MODE_GUIDED:    "SUB_MODE_GUIDED",
	SUB_MODE_CIRCLE:    "SUB_MODE_CIRCLE",
	SUB_MODE_SURFACE:   "SUB_MODE_SURFACE",
	SUB_MODE_POSHOLD:   "SUB_MODE_POSHOLD",
	SUB_MODE_MANUAL:    "SUB_MODE_MANUAL",
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e SUB_MODE) MarshalText() ([]byte, error) {
	var names []string
	for mask, label := range labels_SUB_MODE {
		if e&mask == mask {
			names = append(names, label)
		}
	}
	return []byte(strings.Join(names, " | ")), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *SUB_MODE) UnmarshalText(text []byte) error {
	labels := strings.Split(string(text), " | ")
	var mask SUB_MODE
	for _, label := range labels {
		found := false
		for value, l := range labels_SUB_MODE {
			if l == label {
				mask |= value
				found = true
				break
			}
		}
		if !found {
			return fmt.Errorf("invalid label '%s'", label)
		}
	}
	*e = mask
	return nil
}

// String implements the fmt.Stringer interface.
func (e SUB_MODE) String() string {
	val, _ := e.MarshalText()
	return string(val)
}
