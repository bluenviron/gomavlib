//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package ardupilotmega

import (
	"fmt"
	"strings"
)

// A mapping of antenna tracker flight modes for custom_mode field of heartbeat.
type TRACKER_MODE uint32

const (
	TRACKER_MODE_MANUAL       TRACKER_MODE = 0
	TRACKER_MODE_STOP         TRACKER_MODE = 1
	TRACKER_MODE_SCAN         TRACKER_MODE = 2
	TRACKER_MODE_SERVO_TEST   TRACKER_MODE = 3
	TRACKER_MODE_AUTO         TRACKER_MODE = 10
	TRACKER_MODE_INITIALIZING TRACKER_MODE = 16
)

var labels_TRACKER_MODE = map[TRACKER_MODE]string{
	TRACKER_MODE_MANUAL:       "TRACKER_MODE_MANUAL",
	TRACKER_MODE_STOP:         "TRACKER_MODE_STOP",
	TRACKER_MODE_SCAN:         "TRACKER_MODE_SCAN",
	TRACKER_MODE_SERVO_TEST:   "TRACKER_MODE_SERVO_TEST",
	TRACKER_MODE_AUTO:         "TRACKER_MODE_AUTO",
	TRACKER_MODE_INITIALIZING: "TRACKER_MODE_INITIALIZING",
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e TRACKER_MODE) MarshalText() ([]byte, error) {
	var names []string
	for mask, label := range labels_TRACKER_MODE {
		if e&mask == mask {
			names = append(names, label)
		}
	}
	return []byte(strings.Join(names, " | ")), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *TRACKER_MODE) UnmarshalText(text []byte) error {
	labels := strings.Split(string(text), " | ")
	var mask TRACKER_MODE
	for _, label := range labels {
		found := false
		for value, l := range labels_TRACKER_MODE {
			if l == label {
				mask |= value
				found = true
				break
			}
		}
		if !found {
			return fmt.Errorf("invalid label '%s'", label)
		}
	}
	*e = mask
	return nil
}

// String implements the fmt.Stringer interface.
func (e TRACKER_MODE) String() string {
	val, _ := e.MarshalText()
	return string(val)
}
