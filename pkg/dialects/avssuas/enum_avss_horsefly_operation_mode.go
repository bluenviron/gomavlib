//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package avssuas

import (
	"fmt"
	"strings"
)

type AVSS_HORSEFLY_OPERATION_MODE uint32

const (
	// In manual control mode
	MODE_HORSEFLY_MANUAL_CTRL AVSS_HORSEFLY_OPERATION_MODE = 0
	// In auto takeoff mode
	MODE_HORSEFLY_AUTO_TAKEOFF AVSS_HORSEFLY_OPERATION_MODE = 1
	// In auto landing mode
	MODE_HORSEFLY_AUTO_LANDING AVSS_HORSEFLY_OPERATION_MODE = 2
	// In go home mode
	MODE_HORSEFLY_NAVI_GO_HOME AVSS_HORSEFLY_OPERATION_MODE = 3
	// In drop mode
	MODE_HORSEFLY_DROP AVSS_HORSEFLY_OPERATION_MODE = 4
)

var labels_AVSS_HORSEFLY_OPERATION_MODE = map[AVSS_HORSEFLY_OPERATION_MODE]string{
	MODE_HORSEFLY_MANUAL_CTRL:  "MODE_HORSEFLY_MANUAL_CTRL",
	MODE_HORSEFLY_AUTO_TAKEOFF: "MODE_HORSEFLY_AUTO_TAKEOFF",
	MODE_HORSEFLY_AUTO_LANDING: "MODE_HORSEFLY_AUTO_LANDING",
	MODE_HORSEFLY_NAVI_GO_HOME: "MODE_HORSEFLY_NAVI_GO_HOME",
	MODE_HORSEFLY_DROP:         "MODE_HORSEFLY_DROP",
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e AVSS_HORSEFLY_OPERATION_MODE) MarshalText() ([]byte, error) {
	var names []string
	for mask, label := range labels_AVSS_HORSEFLY_OPERATION_MODE {
		if e&mask == mask {
			names = append(names, label)
		}
	}
	return []byte(strings.Join(names, " | ")), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *AVSS_HORSEFLY_OPERATION_MODE) UnmarshalText(text []byte) error {
	labels := strings.Split(string(text), " | ")
	var mask AVSS_HORSEFLY_OPERATION_MODE
	for _, label := range labels {
		found := false
		for value, l := range labels_AVSS_HORSEFLY_OPERATION_MODE {
			if l == label {
				mask |= value
				found = true
				break
			}
		}
		if !found {
			return fmt.Errorf("invalid label '%s'", label)
		}
	}
	*e = mask
	return nil
}

// String implements the fmt.Stringer interface.
func (e AVSS_HORSEFLY_OPERATION_MODE) String() string {
	val, _ := e.MarshalText()
	return string(val)
}
