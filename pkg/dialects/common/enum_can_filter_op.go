//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package common

import (
	"fmt"
	"strings"
)

type CAN_FILTER_OP uint32

const (
	CAN_FILTER_REPLACE CAN_FILTER_OP = 0
	CAN_FILTER_ADD     CAN_FILTER_OP = 1
	CAN_FILTER_REMOVE  CAN_FILTER_OP = 2
)

var labels_CAN_FILTER_OP = map[CAN_FILTER_OP]string{
	CAN_FILTER_REPLACE: "CAN_FILTER_REPLACE",
	CAN_FILTER_ADD:     "CAN_FILTER_ADD",
	CAN_FILTER_REMOVE:  "CAN_FILTER_REMOVE",
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e CAN_FILTER_OP) MarshalText() ([]byte, error) {
	var names []string
	for mask, label := range labels_CAN_FILTER_OP {
		if e&mask == mask {
			names = append(names, label)
		}
	}
	return []byte(strings.Join(names, " | ")), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *CAN_FILTER_OP) UnmarshalText(text []byte) error {
	labels := strings.Split(string(text), " | ")
	var mask CAN_FILTER_OP
	for _, label := range labels {
		found := false
		for value, l := range labels_CAN_FILTER_OP {
			if l == label {
				mask |= value
				found = true
				break
			}
		}
		if !found {
			return fmt.Errorf("invalid label '%s'", label)
		}
	}
	*e = mask
	return nil
}

// String implements the fmt.Stringer interface.
func (e CAN_FILTER_OP) String() string {
	val, _ := e.MarshalText()
	return string(val)
}
