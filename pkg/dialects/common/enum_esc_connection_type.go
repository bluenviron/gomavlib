//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package common

import (
	"fmt"
	"strings"
)

// Indicates the ESC connection type.
type ESC_CONNECTION_TYPE uint32

const (
	// Traditional PPM ESC.
	ESC_CONNECTION_TYPE_PPM ESC_CONNECTION_TYPE = 0
	// Serial Bus connected ESC.
	ESC_CONNECTION_TYPE_SERIAL ESC_CONNECTION_TYPE = 1
	// One Shot PPM ESC.
	ESC_CONNECTION_TYPE_ONESHOT ESC_CONNECTION_TYPE = 2
	// I2C ESC.
	ESC_CONNECTION_TYPE_I2C ESC_CONNECTION_TYPE = 3
	// CAN-Bus ESC.
	ESC_CONNECTION_TYPE_CAN ESC_CONNECTION_TYPE = 4
	// DShot ESC.
	ESC_CONNECTION_TYPE_DSHOT ESC_CONNECTION_TYPE = 5
)

var labels_ESC_CONNECTION_TYPE = map[ESC_CONNECTION_TYPE]string{
	ESC_CONNECTION_TYPE_PPM:     "ESC_CONNECTION_TYPE_PPM",
	ESC_CONNECTION_TYPE_SERIAL:  "ESC_CONNECTION_TYPE_SERIAL",
	ESC_CONNECTION_TYPE_ONESHOT: "ESC_CONNECTION_TYPE_ONESHOT",
	ESC_CONNECTION_TYPE_I2C:     "ESC_CONNECTION_TYPE_I2C",
	ESC_CONNECTION_TYPE_CAN:     "ESC_CONNECTION_TYPE_CAN",
	ESC_CONNECTION_TYPE_DSHOT:   "ESC_CONNECTION_TYPE_DSHOT",
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e ESC_CONNECTION_TYPE) MarshalText() ([]byte, error) {
	var names []string
	for mask, label := range labels_ESC_CONNECTION_TYPE {
		if e&mask == mask {
			names = append(names, label)
		}
	}
	return []byte(strings.Join(names, " | ")), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *ESC_CONNECTION_TYPE) UnmarshalText(text []byte) error {
	labels := strings.Split(string(text), " | ")
	var mask ESC_CONNECTION_TYPE
	for _, label := range labels {
		found := false
		for value, l := range labels_ESC_CONNECTION_TYPE {
			if l == label {
				mask |= value
				found = true
				break
			}
		}
		if !found {
			return fmt.Errorf("invalid label '%s'", label)
		}
	}
	*e = mask
	return nil
}

// String implements the fmt.Stringer interface.
func (e ESC_CONNECTION_TYPE) String() string {
	val, _ := e.MarshalText()
	return string(val)
}
