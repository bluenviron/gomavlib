//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package common

import (
	"fmt"
	"strings"
)

// Flags to report ESC failures.
type ESC_FAILURE_FLAGS uint32

const (
	// No ESC failure.
	ESC_FAILURE_NONE ESC_FAILURE_FLAGS = 0
	// Over current failure.
	ESC_FAILURE_OVER_CURRENT ESC_FAILURE_FLAGS = 1
	// Over voltage failure.
	ESC_FAILURE_OVER_VOLTAGE ESC_FAILURE_FLAGS = 2
	// Over temperature failure.
	ESC_FAILURE_OVER_TEMPERATURE ESC_FAILURE_FLAGS = 4
	// Over RPM failure.
	ESC_FAILURE_OVER_RPM ESC_FAILURE_FLAGS = 8
	// Inconsistent command failure i.e. out of bounds.
	ESC_FAILURE_INCONSISTENT_CMD ESC_FAILURE_FLAGS = 16
	// Motor stuck failure.
	ESC_FAILURE_MOTOR_STUCK ESC_FAILURE_FLAGS = 32
	// Generic ESC failure.
	ESC_FAILURE_GENERIC ESC_FAILURE_FLAGS = 64
)

var labels_ESC_FAILURE_FLAGS = map[ESC_FAILURE_FLAGS]string{
	ESC_FAILURE_NONE:             "ESC_FAILURE_NONE",
	ESC_FAILURE_OVER_CURRENT:     "ESC_FAILURE_OVER_CURRENT",
	ESC_FAILURE_OVER_VOLTAGE:     "ESC_FAILURE_OVER_VOLTAGE",
	ESC_FAILURE_OVER_TEMPERATURE: "ESC_FAILURE_OVER_TEMPERATURE",
	ESC_FAILURE_OVER_RPM:         "ESC_FAILURE_OVER_RPM",
	ESC_FAILURE_INCONSISTENT_CMD: "ESC_FAILURE_INCONSISTENT_CMD",
	ESC_FAILURE_MOTOR_STUCK:      "ESC_FAILURE_MOTOR_STUCK",
	ESC_FAILURE_GENERIC:          "ESC_FAILURE_GENERIC",
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e ESC_FAILURE_FLAGS) MarshalText() ([]byte, error) {
	var names []string
	for mask, label := range labels_ESC_FAILURE_FLAGS {
		if e&mask == mask {
			names = append(names, label)
		}
	}
	return []byte(strings.Join(names, " | ")), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *ESC_FAILURE_FLAGS) UnmarshalText(text []byte) error {
	labels := strings.Split(string(text), " | ")
	var mask ESC_FAILURE_FLAGS
	for _, label := range labels {
		found := false
		for value, l := range labels_ESC_FAILURE_FLAGS {
			if l == label {
				mask |= value
				found = true
				break
			}
		}
		if !found {
			return fmt.Errorf("invalid label '%s'", label)
		}
	}
	*e = mask
	return nil
}

// String implements the fmt.Stringer interface.
func (e ESC_FAILURE_FLAGS) String() string {
	val, _ := e.MarshalText()
	return string(val)
}
