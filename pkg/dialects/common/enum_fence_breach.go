//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package common

import (
	"fmt"
	"strings"
)

type FENCE_BREACH uint32

const (
	// No last fence breach
	FENCE_BREACH_NONE FENCE_BREACH = 0
	// Breached minimum altitude
	FENCE_BREACH_MINALT FENCE_BREACH = 1
	// Breached maximum altitude
	FENCE_BREACH_MAXALT FENCE_BREACH = 2
	// Breached fence boundary
	FENCE_BREACH_BOUNDARY FENCE_BREACH = 3
)

var labels_FENCE_BREACH = map[FENCE_BREACH]string{
	FENCE_BREACH_NONE:     "FENCE_BREACH_NONE",
	FENCE_BREACH_MINALT:   "FENCE_BREACH_MINALT",
	FENCE_BREACH_MAXALT:   "FENCE_BREACH_MAXALT",
	FENCE_BREACH_BOUNDARY: "FENCE_BREACH_BOUNDARY",
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e FENCE_BREACH) MarshalText() ([]byte, error) {
	var names []string
	for mask, label := range labels_FENCE_BREACH {
		if e&mask == mask {
			names = append(names, label)
		}
	}
	return []byte(strings.Join(names, " | ")), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *FENCE_BREACH) UnmarshalText(text []byte) error {
	labels := strings.Split(string(text), " | ")
	var mask FENCE_BREACH
	for _, label := range labels {
		found := false
		for value, l := range labels_FENCE_BREACH {
			if l == label {
				mask |= value
				found = true
				break
			}
		}
		if !found {
			return fmt.Errorf("invalid label '%s'", label)
		}
	}
	*e = mask
	return nil
}

// String implements the fmt.Stringer interface.
func (e FENCE_BREACH) String() string {
	val, _ := e.MarshalText()
	return string(val)
}
