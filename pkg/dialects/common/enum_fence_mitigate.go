//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package common

import (
	"fmt"
	"strings"
)

// Actions being taken to mitigate/prevent fence breach
type FENCE_MITIGATE uint32

const (
	// Unknown
	FENCE_MITIGATE_UNKNOWN FENCE_MITIGATE = 0
	// No actions being taken
	FENCE_MITIGATE_NONE FENCE_MITIGATE = 1
	// Velocity limiting active to prevent breach
	FENCE_MITIGATE_VEL_LIMIT FENCE_MITIGATE = 2
)

var labels_FENCE_MITIGATE = map[FENCE_MITIGATE]string{
	FENCE_MITIGATE_UNKNOWN:   "FENCE_MITIGATE_UNKNOWN",
	FENCE_MITIGATE_NONE:      "FENCE_MITIGATE_NONE",
	FENCE_MITIGATE_VEL_LIMIT: "FENCE_MITIGATE_VEL_LIMIT",
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e FENCE_MITIGATE) MarshalText() ([]byte, error) {
	var names []string
	for mask, label := range labels_FENCE_MITIGATE {
		if e&mask == mask {
			names = append(names, label)
		}
	}
	return []byte(strings.Join(names, " | ")), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *FENCE_MITIGATE) UnmarshalText(text []byte) error {
	labels := strings.Split(string(text), " | ")
	var mask FENCE_MITIGATE
	for _, label := range labels {
		found := false
		for value, l := range labels_FENCE_MITIGATE {
			if l == label {
				mask |= value
				found = true
				break
			}
		}
		if !found {
			return fmt.Errorf("invalid label '%s'", label)
		}
	}
	*e = mask
	return nil
}

// String implements the fmt.Stringer interface.
func (e FENCE_MITIGATE) String() string {
	val, _ := e.MarshalText()
	return string(val)
}
