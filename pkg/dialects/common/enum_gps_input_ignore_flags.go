//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package common

import (
	"fmt"
	"strings"
)

type GPS_INPUT_IGNORE_FLAGS uint32

const (
	// ignore altitude field
	GPS_INPUT_IGNORE_FLAG_ALT GPS_INPUT_IGNORE_FLAGS = 1
	// ignore hdop field
	GPS_INPUT_IGNORE_FLAG_HDOP GPS_INPUT_IGNORE_FLAGS = 2
	// ignore vdop field
	GPS_INPUT_IGNORE_FLAG_VDOP GPS_INPUT_IGNORE_FLAGS = 4
	// ignore horizontal velocity field (vn and ve)
	GPS_INPUT_IGNORE_FLAG_VEL_HORIZ GPS_INPUT_IGNORE_FLAGS = 8
	// ignore vertical velocity field (vd)
	GPS_INPUT_IGNORE_FLAG_VEL_VERT GPS_INPUT_IGNORE_FLAGS = 16
	// ignore speed accuracy field
	GPS_INPUT_IGNORE_FLAG_SPEED_ACCURACY GPS_INPUT_IGNORE_FLAGS = 32
	// ignore horizontal accuracy field
	GPS_INPUT_IGNORE_FLAG_HORIZONTAL_ACCURACY GPS_INPUT_IGNORE_FLAGS = 64
	// ignore vertical accuracy field
	GPS_INPUT_IGNORE_FLAG_VERTICAL_ACCURACY GPS_INPUT_IGNORE_FLAGS = 128
)

var labels_GPS_INPUT_IGNORE_FLAGS = map[GPS_INPUT_IGNORE_FLAGS]string{
	GPS_INPUT_IGNORE_FLAG_ALT:                 "GPS_INPUT_IGNORE_FLAG_ALT",
	GPS_INPUT_IGNORE_FLAG_HDOP:                "GPS_INPUT_IGNORE_FLAG_HDOP",
	GPS_INPUT_IGNORE_FLAG_VDOP:                "GPS_INPUT_IGNORE_FLAG_VDOP",
	GPS_INPUT_IGNORE_FLAG_VEL_HORIZ:           "GPS_INPUT_IGNORE_FLAG_VEL_HORIZ",
	GPS_INPUT_IGNORE_FLAG_VEL_VERT:            "GPS_INPUT_IGNORE_FLAG_VEL_VERT",
	GPS_INPUT_IGNORE_FLAG_SPEED_ACCURACY:      "GPS_INPUT_IGNORE_FLAG_SPEED_ACCURACY",
	GPS_INPUT_IGNORE_FLAG_HORIZONTAL_ACCURACY: "GPS_INPUT_IGNORE_FLAG_HORIZONTAL_ACCURACY",
	GPS_INPUT_IGNORE_FLAG_VERTICAL_ACCURACY:   "GPS_INPUT_IGNORE_FLAG_VERTICAL_ACCURACY",
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e GPS_INPUT_IGNORE_FLAGS) MarshalText() ([]byte, error) {
	var names []string
	for mask, label := range labels_GPS_INPUT_IGNORE_FLAGS {
		if e&mask == mask {
			names = append(names, label)
		}
	}
	return []byte(strings.Join(names, " | ")), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *GPS_INPUT_IGNORE_FLAGS) UnmarshalText(text []byte) error {
	labels := strings.Split(string(text), " | ")
	var mask GPS_INPUT_IGNORE_FLAGS
	for _, label := range labels {
		found := false
		for value, l := range labels_GPS_INPUT_IGNORE_FLAGS {
			if l == label {
				mask |= value
				found = true
				break
			}
		}
		if !found {
			return fmt.Errorf("invalid label '%s'", label)
		}
	}
	*e = mask
	return nil
}

// String implements the fmt.Stringer interface.
func (e GPS_INPUT_IGNORE_FLAGS) String() string {
	val, _ := e.MarshalText()
	return string(val)
}
