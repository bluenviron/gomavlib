//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package common

import (
	"fmt"
	"strings"
)

// Gripper actions.
type GRIPPER_ACTIONS uint32

const (
	// Gripper release cargo.
	GRIPPER_ACTION_RELEASE GRIPPER_ACTIONS = 0
	// Gripper grab onto cargo.
	GRIPPER_ACTION_GRAB GRIPPER_ACTIONS = 1
)

var labels_GRIPPER_ACTIONS = map[GRIPPER_ACTIONS]string{
	GRIPPER_ACTION_RELEASE: "GRIPPER_ACTION_RELEASE",
	GRIPPER_ACTION_GRAB:    "GRIPPER_ACTION_GRAB",
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e GRIPPER_ACTIONS) MarshalText() ([]byte, error) {
	var names []string
	for mask, label := range labels_GRIPPER_ACTIONS {
		if e&mask == mask {
			names = append(names, label)
		}
	}
	return []byte(strings.Join(names, " | ")), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *GRIPPER_ACTIONS) UnmarshalText(text []byte) error {
	labels := strings.Split(string(text), " | ")
	var mask GRIPPER_ACTIONS
	for _, label := range labels {
		found := false
		for value, l := range labels_GRIPPER_ACTIONS {
			if l == label {
				mask |= value
				found = true
				break
			}
		}
		if !found {
			return fmt.Errorf("invalid label '%s'", label)
		}
	}
	*e = mask
	return nil
}

// String implements the fmt.Stringer interface.
func (e GRIPPER_ACTIONS) String() string {
	val, _ := e.MarshalText()
	return string(val)
}
