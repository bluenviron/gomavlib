//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package common

import (
	"fmt"
	"strings"
)

type MAG_CAL_STATUS uint32

const (
	MAG_CAL_NOT_STARTED      MAG_CAL_STATUS = 0
	MAG_CAL_WAITING_TO_START MAG_CAL_STATUS = 1
	MAG_CAL_RUNNING_STEP_ONE MAG_CAL_STATUS = 2
	MAG_CAL_RUNNING_STEP_TWO MAG_CAL_STATUS = 3
	MAG_CAL_SUCCESS          MAG_CAL_STATUS = 4
	MAG_CAL_FAILED           MAG_CAL_STATUS = 5
	MAG_CAL_BAD_ORIENTATION  MAG_CAL_STATUS = 6
	MAG_CAL_BAD_RADIUS       MAG_CAL_STATUS = 7
)

var labels_MAG_CAL_STATUS = map[MAG_CAL_STATUS]string{
	MAG_CAL_NOT_STARTED:      "MAG_CAL_NOT_STARTED",
	MAG_CAL_WAITING_TO_START: "MAG_CAL_WAITING_TO_START",
	MAG_CAL_RUNNING_STEP_ONE: "MAG_CAL_RUNNING_STEP_ONE",
	MAG_CAL_RUNNING_STEP_TWO: "MAG_CAL_RUNNING_STEP_TWO",
	MAG_CAL_SUCCESS:          "MAG_CAL_SUCCESS",
	MAG_CAL_FAILED:           "MAG_CAL_FAILED",
	MAG_CAL_BAD_ORIENTATION:  "MAG_CAL_BAD_ORIENTATION",
	MAG_CAL_BAD_RADIUS:       "MAG_CAL_BAD_RADIUS",
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e MAG_CAL_STATUS) MarshalText() ([]byte, error) {
	var names []string
	for mask, label := range labels_MAG_CAL_STATUS {
		if e&mask == mask {
			names = append(names, label)
		}
	}
	return []byte(strings.Join(names, " | ")), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *MAG_CAL_STATUS) UnmarshalText(text []byte) error {
	labels := strings.Split(string(text), " | ")
	var mask MAG_CAL_STATUS
	for _, label := range labels {
		found := false
		for value, l := range labels_MAG_CAL_STATUS {
			if l == label {
				mask |= value
				found = true
				break
			}
		}
		if !found {
			return fmt.Errorf("invalid label '%s'", label)
		}
	}
	*e = mask
	return nil
}

// String implements the fmt.Stringer interface.
func (e MAG_CAL_STATUS) String() string {
	val, _ := e.MarshalText()
	return string(val)
}
