//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package common

import (
	"fmt"
	"strings"
)

// Enumeration of battery types
type MAV_BATTERY_TYPE uint32

const (
	// Not specified.
	MAV_BATTERY_TYPE_UNKNOWN MAV_BATTERY_TYPE = 0
	// Lithium polymer battery
	MAV_BATTERY_TYPE_LIPO MAV_BATTERY_TYPE = 1
	// Lithium-iron-phosphate battery
	MAV_BATTERY_TYPE_LIFE MAV_BATTERY_TYPE = 2
	// Lithium-ION battery
	MAV_BATTERY_TYPE_LION MAV_BATTERY_TYPE = 3
	// Nickel metal hydride battery
	MAV_BATTERY_TYPE_NIMH MAV_BATTERY_TYPE = 4
)

var labels_MAV_BATTERY_TYPE = map[MAV_BATTERY_TYPE]string{
	MAV_BATTERY_TYPE_UNKNOWN: "MAV_BATTERY_TYPE_UNKNOWN",
	MAV_BATTERY_TYPE_LIPO:    "MAV_BATTERY_TYPE_LIPO",
	MAV_BATTERY_TYPE_LIFE:    "MAV_BATTERY_TYPE_LIFE",
	MAV_BATTERY_TYPE_LION:    "MAV_BATTERY_TYPE_LION",
	MAV_BATTERY_TYPE_NIMH:    "MAV_BATTERY_TYPE_NIMH",
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e MAV_BATTERY_TYPE) MarshalText() ([]byte, error) {
	var names []string
	for mask, label := range labels_MAV_BATTERY_TYPE {
		if e&mask == mask {
			names = append(names, label)
		}
	}
	return []byte(strings.Join(names, " | ")), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *MAV_BATTERY_TYPE) UnmarshalText(text []byte) error {
	labels := strings.Split(string(text), " | ")
	var mask MAV_BATTERY_TYPE
	for _, label := range labels {
		found := false
		for value, l := range labels_MAV_BATTERY_TYPE {
			if l == label {
				mask |= value
				found = true
				break
			}
		}
		if !found {
			return fmt.Errorf("invalid label '%s'", label)
		}
	}
	*e = mask
	return nil
}

// String implements the fmt.Stringer interface.
func (e MAV_BATTERY_TYPE) String() string {
	val, _ := e.MarshalText()
	return string(val)
}
