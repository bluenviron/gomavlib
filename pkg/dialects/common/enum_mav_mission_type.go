//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package common

import (
	"fmt"
	"strings"
)

// Type of mission items being requested/sent in mission protocol.
type MAV_MISSION_TYPE uint32

const (
	// Items are mission commands for main mission.
	MAV_MISSION_TYPE_MISSION MAV_MISSION_TYPE = 0
	// Specifies GeoFence area(s). Items are MAV_CMD_NAV_FENCE_ GeoFence items.
	MAV_MISSION_TYPE_FENCE MAV_MISSION_TYPE = 1
	// Specifies the rally points for the vehicle. Rally points are alternative RTL points. Items are MAV_CMD_NAV_RALLY_POINT rally point items.
	MAV_MISSION_TYPE_RALLY MAV_MISSION_TYPE = 2
	// Only used in MISSION_CLEAR_ALL to clear all mission types.
	MAV_MISSION_TYPE_ALL MAV_MISSION_TYPE = 255
)

var labels_MAV_MISSION_TYPE = map[MAV_MISSION_TYPE]string{
	MAV_MISSION_TYPE_MISSION: "MAV_MISSION_TYPE_MISSION",
	MAV_MISSION_TYPE_FENCE:   "MAV_MISSION_TYPE_FENCE",
	MAV_MISSION_TYPE_RALLY:   "MAV_MISSION_TYPE_RALLY",
	MAV_MISSION_TYPE_ALL:     "MAV_MISSION_TYPE_ALL",
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e MAV_MISSION_TYPE) MarshalText() ([]byte, error) {
	var names []string
	for mask, label := range labels_MAV_MISSION_TYPE {
		if e&mask == mask {
			names = append(names, label)
		}
	}
	return []byte(strings.Join(names, " | ")), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *MAV_MISSION_TYPE) UnmarshalText(text []byte) error {
	labels := strings.Split(string(text), " | ")
	var mask MAV_MISSION_TYPE
	for _, label := range labels {
		found := false
		for value, l := range labels_MAV_MISSION_TYPE {
			if l == label {
				mask |= value
				found = true
				break
			}
		}
		if !found {
			return fmt.Errorf("invalid label '%s'", label)
		}
	}
	*e = mask
	return nil
}

// String implements the fmt.Stringer interface.
func (e MAV_MISSION_TYPE) String() string {
	val, _ := e.MarshalText()
	return string(val)
}
