//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package common

import (
	"fmt"
	"strconv"
)

type MAV_ODID_ARM_STATUS uint64

const (
	// Passing arming checks.
	MAV_ODID_ARM_STATUS_GOOD_TO_ARM MAV_ODID_ARM_STATUS = 0
	// Generic arming failure, see error string for details.
	MAV_ODID_ARM_STATUS_PRE_ARM_FAIL_GENERIC MAV_ODID_ARM_STATUS = 1
)

var labels_MAV_ODID_ARM_STATUS = map[MAV_ODID_ARM_STATUS]string{
	MAV_ODID_ARM_STATUS_GOOD_TO_ARM:          "MAV_ODID_ARM_STATUS_GOOD_TO_ARM",
	MAV_ODID_ARM_STATUS_PRE_ARM_FAIL_GENERIC: "MAV_ODID_ARM_STATUS_PRE_ARM_FAIL_GENERIC",
}

var values_MAV_ODID_ARM_STATUS = map[string]MAV_ODID_ARM_STATUS{
	"MAV_ODID_ARM_STATUS_GOOD_TO_ARM":          MAV_ODID_ARM_STATUS_GOOD_TO_ARM,
	"MAV_ODID_ARM_STATUS_PRE_ARM_FAIL_GENERIC": MAV_ODID_ARM_STATUS_PRE_ARM_FAIL_GENERIC,
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e MAV_ODID_ARM_STATUS) MarshalText() ([]byte, error) {
	if name, ok := labels_MAV_ODID_ARM_STATUS[e]; ok {
		return []byte(name), nil
	}
	return []byte(strconv.Itoa(int(e))), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *MAV_ODID_ARM_STATUS) UnmarshalText(text []byte) error {
	if value, ok := values_MAV_ODID_ARM_STATUS[string(text)]; ok {
		*e = value
	} else if value, err := strconv.Atoi(string(text)); err == nil {
		*e = MAV_ODID_ARM_STATUS(value)
	} else {
		return fmt.Errorf("invalid label '%s'", text)
	}
	return nil
}

// String implements the fmt.Stringer interface.
func (e MAV_ODID_ARM_STATUS) String() string {
	val, _ := e.MarshalText()
	return string(val)
}
