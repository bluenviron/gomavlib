//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package common

import (
	"fmt"
	"strings"
)

type MAV_ODID_CLASS_EU uint32

const (
	// The class for the UA, according to the EU specification, is undeclared.
	MAV_ODID_CLASS_EU_UNDECLARED MAV_ODID_CLASS_EU = 0
	// The class for the UA, according to the EU specification, is Class 0.
	MAV_ODID_CLASS_EU_CLASS_0 MAV_ODID_CLASS_EU = 1
	// The class for the UA, according to the EU specification, is Class 1.
	MAV_ODID_CLASS_EU_CLASS_1 MAV_ODID_CLASS_EU = 2
	// The class for the UA, according to the EU specification, is Class 2.
	MAV_ODID_CLASS_EU_CLASS_2 MAV_ODID_CLASS_EU = 3
	// The class for the UA, according to the EU specification, is Class 3.
	MAV_ODID_CLASS_EU_CLASS_3 MAV_ODID_CLASS_EU = 4
	// The class for the UA, according to the EU specification, is Class 4.
	MAV_ODID_CLASS_EU_CLASS_4 MAV_ODID_CLASS_EU = 5
	// The class for the UA, according to the EU specification, is Class 5.
	MAV_ODID_CLASS_EU_CLASS_5 MAV_ODID_CLASS_EU = 6
	// The class for the UA, according to the EU specification, is Class 6.
	MAV_ODID_CLASS_EU_CLASS_6 MAV_ODID_CLASS_EU = 7
)

var labels_MAV_ODID_CLASS_EU = map[MAV_ODID_CLASS_EU]string{
	MAV_ODID_CLASS_EU_UNDECLARED: "MAV_ODID_CLASS_EU_UNDECLARED",
	MAV_ODID_CLASS_EU_CLASS_0:    "MAV_ODID_CLASS_EU_CLASS_0",
	MAV_ODID_CLASS_EU_CLASS_1:    "MAV_ODID_CLASS_EU_CLASS_1",
	MAV_ODID_CLASS_EU_CLASS_2:    "MAV_ODID_CLASS_EU_CLASS_2",
	MAV_ODID_CLASS_EU_CLASS_3:    "MAV_ODID_CLASS_EU_CLASS_3",
	MAV_ODID_CLASS_EU_CLASS_4:    "MAV_ODID_CLASS_EU_CLASS_4",
	MAV_ODID_CLASS_EU_CLASS_5:    "MAV_ODID_CLASS_EU_CLASS_5",
	MAV_ODID_CLASS_EU_CLASS_6:    "MAV_ODID_CLASS_EU_CLASS_6",
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e MAV_ODID_CLASS_EU) MarshalText() ([]byte, error) {
	var names []string
	for mask, label := range labels_MAV_ODID_CLASS_EU {
		if e&mask == mask {
			names = append(names, label)
		}
	}
	return []byte(strings.Join(names, " | ")), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *MAV_ODID_CLASS_EU) UnmarshalText(text []byte) error {
	labels := strings.Split(string(text), " | ")
	var mask MAV_ODID_CLASS_EU
	for _, label := range labels {
		found := false
		for value, l := range labels_MAV_ODID_CLASS_EU {
			if l == label {
				mask |= value
				found = true
				break
			}
		}
		if !found {
			return fmt.Errorf("invalid label '%s'", label)
		}
	}
	*e = mask
	return nil
}

// String implements the fmt.Stringer interface.
func (e MAV_ODID_CLASS_EU) String() string {
	val, _ := e.MarshalText()
	return string(val)
}
