//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package common

import (
	"fmt"
	"strings"
)

type MAV_TUNNEL_PAYLOAD_TYPE uint32

const (
	// Encoding of payload unknown.
	MAV_TUNNEL_PAYLOAD_TYPE_UNKNOWN MAV_TUNNEL_PAYLOAD_TYPE = 0
	// Registered for STorM32 gimbal controller.
	MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED0 MAV_TUNNEL_PAYLOAD_TYPE = 200
	// Registered for STorM32 gimbal controller.
	MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED1 MAV_TUNNEL_PAYLOAD_TYPE = 201
	// Registered for STorM32 gimbal controller.
	MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED2 MAV_TUNNEL_PAYLOAD_TYPE = 202
	// Registered for STorM32 gimbal controller.
	MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED3 MAV_TUNNEL_PAYLOAD_TYPE = 203
	// Registered for STorM32 gimbal controller.
	MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED4 MAV_TUNNEL_PAYLOAD_TYPE = 204
	// Registered for STorM32 gimbal controller.
	MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED5 MAV_TUNNEL_PAYLOAD_TYPE = 205
	// Registered for STorM32 gimbal controller.
	MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED6 MAV_TUNNEL_PAYLOAD_TYPE = 206
	// Registered for STorM32 gimbal controller.
	MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED7 MAV_TUNNEL_PAYLOAD_TYPE = 207
	// Registered for STorM32 gimbal controller.
	MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED8 MAV_TUNNEL_PAYLOAD_TYPE = 208
	// Registered for STorM32 gimbal controller.
	MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED9 MAV_TUNNEL_PAYLOAD_TYPE = 209
)

var labels_MAV_TUNNEL_PAYLOAD_TYPE = map[MAV_TUNNEL_PAYLOAD_TYPE]string{
	MAV_TUNNEL_PAYLOAD_TYPE_UNKNOWN:           "MAV_TUNNEL_PAYLOAD_TYPE_UNKNOWN",
	MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED0: "MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED0",
	MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED1: "MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED1",
	MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED2: "MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED2",
	MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED3: "MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED3",
	MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED4: "MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED4",
	MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED5: "MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED5",
	MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED6: "MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED6",
	MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED7: "MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED7",
	MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED8: "MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED8",
	MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED9: "MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED9",
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e MAV_TUNNEL_PAYLOAD_TYPE) MarshalText() ([]byte, error) {
	var names []string
	for mask, label := range labels_MAV_TUNNEL_PAYLOAD_TYPE {
		if e&mask == mask {
			names = append(names, label)
		}
	}
	return []byte(strings.Join(names, " | ")), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *MAV_TUNNEL_PAYLOAD_TYPE) UnmarshalText(text []byte) error {
	labels := strings.Split(string(text), " | ")
	var mask MAV_TUNNEL_PAYLOAD_TYPE
	for _, label := range labels {
		found := false
		for value, l := range labels_MAV_TUNNEL_PAYLOAD_TYPE {
			if l == label {
				mask |= value
				found = true
				break
			}
		}
		if !found {
			return fmt.Errorf("invalid label '%s'", label)
		}
	}
	*e = mask
	return nil
}

// String implements the fmt.Stringer interface.
func (e MAV_TUNNEL_PAYLOAD_TYPE) String() string {
	val, _ := e.MarshalText()
	return string(val)
}
