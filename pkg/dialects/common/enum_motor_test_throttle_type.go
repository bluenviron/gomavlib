//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package common

import (
	"fmt"
	"strings"
)

// Defines how throttle value is represented in MAV_CMD_DO_MOTOR_TEST.
type MOTOR_TEST_THROTTLE_TYPE uint32

const (
	// Throttle as a percentage (0 ~ 100)
	MOTOR_TEST_THROTTLE_PERCENT MOTOR_TEST_THROTTLE_TYPE = 0
	// Throttle as an absolute PWM value (normally in range of 1000~2000).
	MOTOR_TEST_THROTTLE_PWM MOTOR_TEST_THROTTLE_TYPE = 1
	// Throttle pass-through from pilot's transmitter.
	MOTOR_TEST_THROTTLE_PILOT MOTOR_TEST_THROTTLE_TYPE = 2
	// Per-motor compass calibration test.
	MOTOR_TEST_COMPASS_CAL MOTOR_TEST_THROTTLE_TYPE = 3
)

var labels_MOTOR_TEST_THROTTLE_TYPE = map[MOTOR_TEST_THROTTLE_TYPE]string{
	MOTOR_TEST_THROTTLE_PERCENT: "MOTOR_TEST_THROTTLE_PERCENT",
	MOTOR_TEST_THROTTLE_PWM:     "MOTOR_TEST_THROTTLE_PWM",
	MOTOR_TEST_THROTTLE_PILOT:   "MOTOR_TEST_THROTTLE_PILOT",
	MOTOR_TEST_COMPASS_CAL:      "MOTOR_TEST_COMPASS_CAL",
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e MOTOR_TEST_THROTTLE_TYPE) MarshalText() ([]byte, error) {
	var names []string
	for mask, label := range labels_MOTOR_TEST_THROTTLE_TYPE {
		if e&mask == mask {
			names = append(names, label)
		}
	}
	return []byte(strings.Join(names, " | ")), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *MOTOR_TEST_THROTTLE_TYPE) UnmarshalText(text []byte) error {
	labels := strings.Split(string(text), " | ")
	var mask MOTOR_TEST_THROTTLE_TYPE
	for _, label := range labels {
		found := false
		for value, l := range labels_MOTOR_TEST_THROTTLE_TYPE {
			if l == label {
				mask |= value
				found = true
				break
			}
		}
		if !found {
			return fmt.Errorf("invalid label '%s'", label)
		}
	}
	*e = mask
	return nil
}

// String implements the fmt.Stringer interface.
func (e MOTOR_TEST_THROTTLE_TYPE) String() string {
	val, _ := e.MarshalText()
	return string(val)
}
