//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package common

import (
	"fmt"
	"strings"
)

// Yaw behaviour during orbit flight.
type ORBIT_YAW_BEHAVIOUR uint32

const (
	// Vehicle front points to the center (default).
	ORBIT_YAW_BEHAVIOUR_HOLD_FRONT_TO_CIRCLE_CENTER ORBIT_YAW_BEHAVIOUR = 0
	// Vehicle front holds heading when message received.
	ORBIT_YAW_BEHAVIOUR_HOLD_INITIAL_HEADING ORBIT_YAW_BEHAVIOUR = 1
	// Yaw uncontrolled.
	ORBIT_YAW_BEHAVIOUR_UNCONTROLLED ORBIT_YAW_BEHAVIOUR = 2
	// Vehicle front follows flight path (tangential to circle).
	ORBIT_YAW_BEHAVIOUR_HOLD_FRONT_TANGENT_TO_CIRCLE ORBIT_YAW_BEHAVIOUR = 3
	// Yaw controlled by RC input.
	ORBIT_YAW_BEHAVIOUR_RC_CONTROLLED ORBIT_YAW_BEHAVIOUR = 4
)

var labels_ORBIT_YAW_BEHAVIOUR = map[ORBIT_YAW_BEHAVIOUR]string{
	ORBIT_YAW_BEHAVIOUR_HOLD_FRONT_TO_CIRCLE_CENTER:  "ORBIT_YAW_BEHAVIOUR_HOLD_FRONT_TO_CIRCLE_CENTER",
	ORBIT_YAW_BEHAVIOUR_HOLD_INITIAL_HEADING:         "ORBIT_YAW_BEHAVIOUR_HOLD_INITIAL_HEADING",
	ORBIT_YAW_BEHAVIOUR_UNCONTROLLED:                 "ORBIT_YAW_BEHAVIOUR_UNCONTROLLED",
	ORBIT_YAW_BEHAVIOUR_HOLD_FRONT_TANGENT_TO_CIRCLE: "ORBIT_YAW_BEHAVIOUR_HOLD_FRONT_TANGENT_TO_CIRCLE",
	ORBIT_YAW_BEHAVIOUR_RC_CONTROLLED:                "ORBIT_YAW_BEHAVIOUR_RC_CONTROLLED",
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e ORBIT_YAW_BEHAVIOUR) MarshalText() ([]byte, error) {
	var names []string
	for mask, label := range labels_ORBIT_YAW_BEHAVIOUR {
		if e&mask == mask {
			names = append(names, label)
		}
	}
	return []byte(strings.Join(names, " | ")), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *ORBIT_YAW_BEHAVIOUR) UnmarshalText(text []byte) error {
	labels := strings.Split(string(text), " | ")
	var mask ORBIT_YAW_BEHAVIOUR
	for _, label := range labels {
		found := false
		for value, l := range labels_ORBIT_YAW_BEHAVIOUR {
			if l == label {
				mask |= value
				found = true
				break
			}
		}
		if !found {
			return fmt.Errorf("invalid label '%s'", label)
		}
	}
	*e = mask
	return nil
}

// String implements the fmt.Stringer interface.
func (e ORBIT_YAW_BEHAVIOUR) String() string {
	val, _ := e.MarshalText()
	return string(val)
}
