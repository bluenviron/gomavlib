//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package common

import (
	"fmt"
	"strings"
)

// Result from PARAM_EXT_SET message (or a PARAM_SET within a transaction).
type PARAM_ACK uint32

const (
	// Parameter value ACCEPTED and SET
	PARAM_ACK_ACCEPTED PARAM_ACK = 0
	// Parameter value UNKNOWN/UNSUPPORTED
	PARAM_ACK_VALUE_UNSUPPORTED PARAM_ACK = 1
	// Parameter failed to set
	PARAM_ACK_FAILED PARAM_ACK = 2
	// Parameter value received but not yet set/accepted. A subsequent PARAM_ACK_TRANSACTION or PARAM_EXT_ACK with the final result will follow once operation is completed. This is returned immediately for parameters that take longer to set, indicating that the the parameter was received and does not need to be resent.
	PARAM_ACK_IN_PROGRESS PARAM_ACK = 3
)

var labels_PARAM_ACK = map[PARAM_ACK]string{
	PARAM_ACK_ACCEPTED:          "PARAM_ACK_ACCEPTED",
	PARAM_ACK_VALUE_UNSUPPORTED: "PARAM_ACK_VALUE_UNSUPPORTED",
	PARAM_ACK_FAILED:            "PARAM_ACK_FAILED",
	PARAM_ACK_IN_PROGRESS:       "PARAM_ACK_IN_PROGRESS",
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e PARAM_ACK) MarshalText() ([]byte, error) {
	var names []string
	for mask, label := range labels_PARAM_ACK {
		if e&mask == mask {
			names = append(names, label)
		}
	}
	return []byte(strings.Join(names, " | ")), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *PARAM_ACK) UnmarshalText(text []byte) error {
	labels := strings.Split(string(text), " | ")
	var mask PARAM_ACK
	for _, label := range labels {
		found := false
		for value, l := range labels_PARAM_ACK {
			if l == label {
				mask |= value
				found = true
				break
			}
		}
		if !found {
			return fmt.Errorf("invalid label '%s'", label)
		}
	}
	*e = mask
	return nil
}

// String implements the fmt.Stringer interface.
func (e PARAM_ACK) String() string {
	val, _ := e.MarshalText()
	return string(val)
}
