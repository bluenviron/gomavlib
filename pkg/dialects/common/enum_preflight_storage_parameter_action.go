//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package common

import (
	"fmt"
	"strings"
)

// Actions for reading/writing parameters between persistent and volatile storage when using MAV_CMD_PREFLIGHT_STORAGE.
// (Commonly parameters are loaded from persistent storage (flash/EEPROM) into volatile storage (RAM) on startup and written back when they are changed.)
type PREFLIGHT_STORAGE_PARAMETER_ACTION uint32

const (
	// Read all parameters from persistent storage. Replaces values in volatile storage.
	PARAM_READ_PERSISTENT PREFLIGHT_STORAGE_PARAMETER_ACTION = 0
	// Write all parameter values to persistent storage (flash/EEPROM)
	PARAM_WRITE_PERSISTENT PREFLIGHT_STORAGE_PARAMETER_ACTION = 1
	// Reset all user configurable parameters to their default value (including airframe selection, sensor calibration data, safety settings, and so on). Does not reset values that contain operation counters and vehicle computed statistics.
	PARAM_RESET_CONFIG_DEFAULT PREFLIGHT_STORAGE_PARAMETER_ACTION = 2
	// Reset only sensor calibration parameters to factory defaults (or firmware default if not available)
	PARAM_RESET_SENSOR_DEFAULT PREFLIGHT_STORAGE_PARAMETER_ACTION = 3
	// Reset all parameters, including operation counters, to default values
	PARAM_RESET_ALL_DEFAULT PREFLIGHT_STORAGE_PARAMETER_ACTION = 4
)

var labels_PREFLIGHT_STORAGE_PARAMETER_ACTION = map[PREFLIGHT_STORAGE_PARAMETER_ACTION]string{
	PARAM_READ_PERSISTENT:      "PARAM_READ_PERSISTENT",
	PARAM_WRITE_PERSISTENT:     "PARAM_WRITE_PERSISTENT",
	PARAM_RESET_CONFIG_DEFAULT: "PARAM_RESET_CONFIG_DEFAULT",
	PARAM_RESET_SENSOR_DEFAULT: "PARAM_RESET_SENSOR_DEFAULT",
	PARAM_RESET_ALL_DEFAULT:    "PARAM_RESET_ALL_DEFAULT",
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e PREFLIGHT_STORAGE_PARAMETER_ACTION) MarshalText() ([]byte, error) {
	var names []string
	for mask, label := range labels_PREFLIGHT_STORAGE_PARAMETER_ACTION {
		if e&mask == mask {
			names = append(names, label)
		}
	}
	return []byte(strings.Join(names, " | ")), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *PREFLIGHT_STORAGE_PARAMETER_ACTION) UnmarshalText(text []byte) error {
	labels := strings.Split(string(text), " | ")
	var mask PREFLIGHT_STORAGE_PARAMETER_ACTION
	for _, label := range labels {
		found := false
		for value, l := range labels_PREFLIGHT_STORAGE_PARAMETER_ACTION {
			if l == label {
				mask |= value
				found = true
				break
			}
		}
		if !found {
			return fmt.Errorf("invalid label '%s'", label)
		}
	}
	*e = mask
	return nil
}

// String implements the fmt.Stringer interface.
func (e PREFLIGHT_STORAGE_PARAMETER_ACTION) String() string {
	val, _ := e.MarshalText()
	return string(val)
}
