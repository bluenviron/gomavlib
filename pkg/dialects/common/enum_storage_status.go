//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package common

import (
	"fmt"
	"strings"
)

// Flags to indicate the status of camera storage.
type STORAGE_STATUS uint32

const (
	// Storage is missing (no microSD card loaded for example.)
	STORAGE_STATUS_EMPTY STORAGE_STATUS = 0
	// Storage present but unformatted.
	STORAGE_STATUS_UNFORMATTED STORAGE_STATUS = 1
	// Storage present and ready.
	STORAGE_STATUS_READY STORAGE_STATUS = 2
	// Camera does not supply storage status information. Capacity information in STORAGE_INFORMATION fields will be ignored.
	STORAGE_STATUS_NOT_SUPPORTED STORAGE_STATUS = 3
)

var labels_STORAGE_STATUS = map[STORAGE_STATUS]string{
	STORAGE_STATUS_EMPTY:         "STORAGE_STATUS_EMPTY",
	STORAGE_STATUS_UNFORMATTED:   "STORAGE_STATUS_UNFORMATTED",
	STORAGE_STATUS_READY:         "STORAGE_STATUS_READY",
	STORAGE_STATUS_NOT_SUPPORTED: "STORAGE_STATUS_NOT_SUPPORTED",
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e STORAGE_STATUS) MarshalText() ([]byte, error) {
	var names []string
	for mask, label := range labels_STORAGE_STATUS {
		if e&mask == mask {
			names = append(names, label)
		}
	}
	return []byte(strings.Join(names, " | ")), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *STORAGE_STATUS) UnmarshalText(text []byte) error {
	labels := strings.Split(string(text), " | ")
	var mask STORAGE_STATUS
	for _, label := range labels {
		found := false
		for value, l := range labels_STORAGE_STATUS {
			if l == label {
				mask |= value
				found = true
				break
			}
		}
		if !found {
			return fmt.Errorf("invalid label '%s'", label)
		}
	}
	*e = mask
	return nil
}

// String implements the fmt.Stringer interface.
func (e STORAGE_STATUS) String() string {
	val, _ := e.MarshalText()
	return string(val)
}
