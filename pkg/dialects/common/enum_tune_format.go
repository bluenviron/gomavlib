//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package common

import (
	"fmt"
	"strings"
)

// Tune formats (used for vehicle buzzer/tone generation).
type TUNE_FORMAT uint32

const (
	// Format is QBasic 1.1 Play: https://www.qbasic.net/en/reference/qb11/Statement/PLAY-006.htm.
	TUNE_FORMAT_QBASIC1_1 TUNE_FORMAT = 1
	// Format is Modern Music Markup Language (MML): https://en.wikipedia.org/wiki/Music_Macro_Language#Modern_MML.
	TUNE_FORMAT_MML_MODERN TUNE_FORMAT = 2
)

var labels_TUNE_FORMAT = map[TUNE_FORMAT]string{
	TUNE_FORMAT_QBASIC1_1:  "TUNE_FORMAT_QBASIC1_1",
	TUNE_FORMAT_MML_MODERN: "TUNE_FORMAT_MML_MODERN",
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e TUNE_FORMAT) MarshalText() ([]byte, error) {
	var names []string
	for mask, label := range labels_TUNE_FORMAT {
		if e&mask == mask {
			names = append(names, label)
		}
	}
	return []byte(strings.Join(names, " | ")), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *TUNE_FORMAT) UnmarshalText(text []byte) error {
	labels := strings.Split(string(text), " | ")
	var mask TUNE_FORMAT
	for _, label := range labels {
		found := false
		for value, l := range labels_TUNE_FORMAT {
			if l == label {
				mask |= value
				found = true
				break
			}
		}
		if !found {
			return fmt.Errorf("invalid label '%s'", label)
		}
	}
	*e = mask
	return nil
}

// String implements the fmt.Stringer interface.
func (e TUNE_FORMAT) String() string {
	val, _ := e.MarshalText()
	return string(val)
}
