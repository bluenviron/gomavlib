//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package common

import (
	"fmt"
	"strings"
)

// Generalized UAVCAN node health
type UAVCAN_NODE_HEALTH uint32

const (
	// The node is functioning properly.
	UAVCAN_NODE_HEALTH_OK UAVCAN_NODE_HEALTH = 0
	// A critical parameter went out of range or the node has encountered a minor failure.
	UAVCAN_NODE_HEALTH_WARNING UAVCAN_NODE_HEALTH = 1
	// The node has encountered a major failure.
	UAVCAN_NODE_HEALTH_ERROR UAVCAN_NODE_HEALTH = 2
	// The node has suffered a fatal malfunction.
	UAVCAN_NODE_HEALTH_CRITICAL UAVCAN_NODE_HEALTH = 3
)

var labels_UAVCAN_NODE_HEALTH = map[UAVCAN_NODE_HEALTH]string{
	UAVCAN_NODE_HEALTH_OK:       "UAVCAN_NODE_HEALTH_OK",
	UAVCAN_NODE_HEALTH_WARNING:  "UAVCAN_NODE_HEALTH_WARNING",
	UAVCAN_NODE_HEALTH_ERROR:    "UAVCAN_NODE_HEALTH_ERROR",
	UAVCAN_NODE_HEALTH_CRITICAL: "UAVCAN_NODE_HEALTH_CRITICAL",
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e UAVCAN_NODE_HEALTH) MarshalText() ([]byte, error) {
	var names []string
	for mask, label := range labels_UAVCAN_NODE_HEALTH {
		if e&mask == mask {
			names = append(names, label)
		}
	}
	return []byte(strings.Join(names, " | ")), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *UAVCAN_NODE_HEALTH) UnmarshalText(text []byte) error {
	labels := strings.Split(string(text), " | ")
	var mask UAVCAN_NODE_HEALTH
	for _, label := range labels {
		found := false
		for value, l := range labels_UAVCAN_NODE_HEALTH {
			if l == label {
				mask |= value
				found = true
				break
			}
		}
		if !found {
			return fmt.Errorf("invalid label '%s'", label)
		}
	}
	*e = mask
	return nil
}

// String implements the fmt.Stringer interface.
func (e UAVCAN_NODE_HEALTH) String() string {
	val, _ := e.MarshalText()
	return string(val)
}
