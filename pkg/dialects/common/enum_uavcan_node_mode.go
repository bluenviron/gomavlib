//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package common

import (
	"fmt"
	"strings"
)

// Generalized UAVCAN node mode
type UAVCAN_NODE_MODE uint32

const (
	// The node is performing its primary functions.
	UAVCAN_NODE_MODE_OPERATIONAL UAVCAN_NODE_MODE = 0
	// The node is initializing; this mode is entered immediately after startup.
	UAVCAN_NODE_MODE_INITIALIZATION UAVCAN_NODE_MODE = 1
	// The node is under maintenance.
	UAVCAN_NODE_MODE_MAINTENANCE UAVCAN_NODE_MODE = 2
	// The node is in the process of updating its software.
	UAVCAN_NODE_MODE_SOFTWARE_UPDATE UAVCAN_NODE_MODE = 3
	// The node is no longer available online.
	UAVCAN_NODE_MODE_OFFLINE UAVCAN_NODE_MODE = 7
)

var labels_UAVCAN_NODE_MODE = map[UAVCAN_NODE_MODE]string{
	UAVCAN_NODE_MODE_OPERATIONAL:     "UAVCAN_NODE_MODE_OPERATIONAL",
	UAVCAN_NODE_MODE_INITIALIZATION:  "UAVCAN_NODE_MODE_INITIALIZATION",
	UAVCAN_NODE_MODE_MAINTENANCE:     "UAVCAN_NODE_MODE_MAINTENANCE",
	UAVCAN_NODE_MODE_SOFTWARE_UPDATE: "UAVCAN_NODE_MODE_SOFTWARE_UPDATE",
	UAVCAN_NODE_MODE_OFFLINE:         "UAVCAN_NODE_MODE_OFFLINE",
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e UAVCAN_NODE_MODE) MarshalText() ([]byte, error) {
	var names []string
	for mask, label := range labels_UAVCAN_NODE_MODE {
		if e&mask == mask {
			names = append(names, label)
		}
	}
	return []byte(strings.Join(names, " | ")), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *UAVCAN_NODE_MODE) UnmarshalText(text []byte) error {
	labels := strings.Split(string(text), " | ")
	var mask UAVCAN_NODE_MODE
	for _, label := range labels {
		found := false
		for value, l := range labels_UAVCAN_NODE_MODE {
			if l == label {
				mask |= value
				found = true
				break
			}
		}
		if !found {
			return fmt.Errorf("invalid label '%s'", label)
		}
	}
	*e = mask
	return nil
}

// String implements the fmt.Stringer interface.
func (e UAVCAN_NODE_MODE) String() string {
	val, _ := e.MarshalText()
	return string(val)
}
