//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package common

import (
	"fmt"
	"strings"
)

// Airborne status of UAS.
type UTM_FLIGHT_STATE uint32

const (
	// The flight state can't be determined.
	UTM_FLIGHT_STATE_UNKNOWN UTM_FLIGHT_STATE = 1
	// UAS on ground.
	UTM_FLIGHT_STATE_GROUND UTM_FLIGHT_STATE = 2
	// UAS airborne.
	UTM_FLIGHT_STATE_AIRBORNE UTM_FLIGHT_STATE = 3
	// UAS is in an emergency flight state.
	UTM_FLIGHT_STATE_EMERGENCY UTM_FLIGHT_STATE = 16
	// UAS has no active controls.
	UTM_FLIGHT_STATE_NOCTRL UTM_FLIGHT_STATE = 32
)

var labels_UTM_FLIGHT_STATE = map[UTM_FLIGHT_STATE]string{
	UTM_FLIGHT_STATE_UNKNOWN:   "UTM_FLIGHT_STATE_UNKNOWN",
	UTM_FLIGHT_STATE_GROUND:    "UTM_FLIGHT_STATE_GROUND",
	UTM_FLIGHT_STATE_AIRBORNE:  "UTM_FLIGHT_STATE_AIRBORNE",
	UTM_FLIGHT_STATE_EMERGENCY: "UTM_FLIGHT_STATE_EMERGENCY",
	UTM_FLIGHT_STATE_NOCTRL:    "UTM_FLIGHT_STATE_NOCTRL",
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e UTM_FLIGHT_STATE) MarshalText() ([]byte, error) {
	var names []string
	for mask, label := range labels_UTM_FLIGHT_STATE {
		if e&mask == mask {
			names = append(names, label)
		}
	}
	return []byte(strings.Join(names, " | ")), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *UTM_FLIGHT_STATE) UnmarshalText(text []byte) error {
	labels := strings.Split(string(text), " | ")
	var mask UTM_FLIGHT_STATE
	for _, label := range labels {
		found := false
		for value, l := range labels_UTM_FLIGHT_STATE {
			if l == label {
				mask |= value
				found = true
				break
			}
		}
		if !found {
			return fmt.Errorf("invalid label '%s'", label)
		}
	}
	*e = mask
	return nil
}

// String implements the fmt.Stringer interface.
func (e UTM_FLIGHT_STATE) String() string {
	val, _ := e.MarshalText()
	return string(val)
}
