//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package csairlink

import (
	"fmt"
	"strconv"
)

type AIRLINK_EYE_HOLE_PUSH_TYPE uint64

const (
	AIRLINK_HP_NOT_PENETRATED AIRLINK_EYE_HOLE_PUSH_TYPE = 0
	AIRLINK_HP_BROKEN         AIRLINK_EYE_HOLE_PUSH_TYPE = 1
)

var labels_AIRLINK_EYE_HOLE_PUSH_TYPE = map[AIRLINK_EYE_HOLE_PUSH_TYPE]string{
	AIRLINK_HP_NOT_PENETRATED: "AIRLINK_HP_NOT_PENETRATED",
	AIRLINK_HP_BROKEN:         "AIRLINK_HP_BROKEN",
}

var values_AIRLINK_EYE_HOLE_PUSH_TYPE = map[string]AIRLINK_EYE_HOLE_PUSH_TYPE{
	"AIRLINK_HP_NOT_PENETRATED": AIRLINK_HP_NOT_PENETRATED,
	"AIRLINK_HP_BROKEN":         AIRLINK_HP_BROKEN,
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e AIRLINK_EYE_HOLE_PUSH_TYPE) MarshalText() ([]byte, error) {
	if name, ok := labels_AIRLINK_EYE_HOLE_PUSH_TYPE[e]; ok {
		return []byte(name), nil
	}
	return []byte(strconv.Itoa(int(e))), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *AIRLINK_EYE_HOLE_PUSH_TYPE) UnmarshalText(text []byte) error {
	if value, ok := values_AIRLINK_EYE_HOLE_PUSH_TYPE[string(text)]; ok {
		*e = value
	} else if value, err := strconv.Atoi(string(text)); err == nil {
		*e = AIRLINK_EYE_HOLE_PUSH_TYPE(value)
	} else {
		return fmt.Errorf("invalid label '%s'", text)
	}
	return nil
}

// String implements the fmt.Stringer interface.
func (e AIRLINK_EYE_HOLE_PUSH_TYPE) String() string {
	val, _ := e.MarshalText()
	return string(val)
}
