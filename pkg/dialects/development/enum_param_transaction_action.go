//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package development

import (
	"fmt"
	"strings"
)

// Possible parameter transaction actions.
type PARAM_TRANSACTION_ACTION uint32

const (
	// Commit the current parameter transaction.
	PARAM_TRANSACTION_ACTION_START PARAM_TRANSACTION_ACTION = 0
	// Commit the current parameter transaction.
	PARAM_TRANSACTION_ACTION_COMMIT PARAM_TRANSACTION_ACTION = 1
	// Cancel the current parameter transaction.
	PARAM_TRANSACTION_ACTION_CANCEL PARAM_TRANSACTION_ACTION = 2
)

var labels_PARAM_TRANSACTION_ACTION = map[PARAM_TRANSACTION_ACTION]string{
	PARAM_TRANSACTION_ACTION_START:  "PARAM_TRANSACTION_ACTION_START",
	PARAM_TRANSACTION_ACTION_COMMIT: "PARAM_TRANSACTION_ACTION_COMMIT",
	PARAM_TRANSACTION_ACTION_CANCEL: "PARAM_TRANSACTION_ACTION_CANCEL",
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e PARAM_TRANSACTION_ACTION) MarshalText() ([]byte, error) {
	var names []string
	for mask, label := range labels_PARAM_TRANSACTION_ACTION {
		if e&mask == mask {
			names = append(names, label)
		}
	}
	return []byte(strings.Join(names, " | ")), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *PARAM_TRANSACTION_ACTION) UnmarshalText(text []byte) error {
	labels := strings.Split(string(text), " | ")
	var mask PARAM_TRANSACTION_ACTION
	for _, label := range labels {
		found := false
		for value, l := range labels_PARAM_TRANSACTION_ACTION {
			if l == label {
				mask |= value
				found = true
				break
			}
		}
		if !found {
			return fmt.Errorf("invalid label '%s'", label)
		}
	}
	*e = mask
	return nil
}

// String implements the fmt.Stringer interface.
func (e PARAM_TRANSACTION_ACTION) String() string {
	val, _ := e.MarshalText()
	return string(val)
}
