//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package development

import (
	"fmt"
	"strings"
)

// Possible transport layers to set and get parameters via mavlink during a parameter transaction.
type PARAM_TRANSACTION_TRANSPORT uint32

const (
	// Transaction over param transport.
	PARAM_TRANSACTION_TRANSPORT_PARAM PARAM_TRANSACTION_TRANSPORT = 0
	// Transaction over param_ext transport.
	PARAM_TRANSACTION_TRANSPORT_PARAM_EXT PARAM_TRANSACTION_TRANSPORT = 1
)

var labels_PARAM_TRANSACTION_TRANSPORT = map[PARAM_TRANSACTION_TRANSPORT]string{
	PARAM_TRANSACTION_TRANSPORT_PARAM:     "PARAM_TRANSACTION_TRANSPORT_PARAM",
	PARAM_TRANSACTION_TRANSPORT_PARAM_EXT: "PARAM_TRANSACTION_TRANSPORT_PARAM_EXT",
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e PARAM_TRANSACTION_TRANSPORT) MarshalText() ([]byte, error) {
	var names []string
	for mask, label := range labels_PARAM_TRANSACTION_TRANSPORT {
		if e&mask == mask {
			names = append(names, label)
		}
	}
	return []byte(strings.Join(names, " | ")), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *PARAM_TRANSACTION_TRANSPORT) UnmarshalText(text []byte) error {
	labels := strings.Split(string(text), " | ")
	var mask PARAM_TRANSACTION_TRANSPORT
	for _, label := range labels {
		found := false
		for value, l := range labels_PARAM_TRANSACTION_TRANSPORT {
			if l == label {
				mask |= value
				found = true
				break
			}
		}
		if !found {
			return fmt.Errorf("invalid label '%s'", label)
		}
	}
	*e = mask
	return nil
}

// String implements the fmt.Stringer interface.
func (e PARAM_TRANSACTION_TRANSPORT) String() string {
	val, _ := e.MarshalText()
	return string(val)
}
