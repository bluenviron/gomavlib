//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package development

import (
	"fmt"
	"strings"
)

// WiFi wireless security protocols.
type WIFI_NETWORK_SECURITY uint32

const (
	// Undefined or unknown security protocol.
	WIFI_NETWORK_SECURITY_UNDEFINED WIFI_NETWORK_SECURITY = 0
	// Open network, no security.
	WIFI_NETWORK_SECURITY_OPEN WIFI_NETWORK_SECURITY = 1
	// WEP.
	WIFI_NETWORK_SECURITY_WEP WIFI_NETWORK_SECURITY = 2
	// WPA1.
	WIFI_NETWORK_SECURITY_WPA1 WIFI_NETWORK_SECURITY = 3
	// WPA2.
	WIFI_NETWORK_SECURITY_WPA2 WIFI_NETWORK_SECURITY = 4
	// WPA3.
	WIFI_NETWORK_SECURITY_WPA3 WIFI_NETWORK_SECURITY = 5
)

var labels_WIFI_NETWORK_SECURITY = map[WIFI_NETWORK_SECURITY]string{
	WIFI_NETWORK_SECURITY_UNDEFINED: "WIFI_NETWORK_SECURITY_UNDEFINED",
	WIFI_NETWORK_SECURITY_OPEN:      "WIFI_NETWORK_SECURITY_OPEN",
	WIFI_NETWORK_SECURITY_WEP:       "WIFI_NETWORK_SECURITY_WEP",
	WIFI_NETWORK_SECURITY_WPA1:      "WIFI_NETWORK_SECURITY_WPA1",
	WIFI_NETWORK_SECURITY_WPA2:      "WIFI_NETWORK_SECURITY_WPA2",
	WIFI_NETWORK_SECURITY_WPA3:      "WIFI_NETWORK_SECURITY_WPA3",
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e WIFI_NETWORK_SECURITY) MarshalText() ([]byte, error) {
	var names []string
	for mask, label := range labels_WIFI_NETWORK_SECURITY {
		if e&mask == mask {
			names = append(names, label)
		}
	}
	return []byte(strings.Join(names, " | ")), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *WIFI_NETWORK_SECURITY) UnmarshalText(text []byte) error {
	labels := strings.Split(string(text), " | ")
	var mask WIFI_NETWORK_SECURITY
	for _, label := range labels {
		found := false
		for value, l := range labels_WIFI_NETWORK_SECURITY {
			if l == label {
				mask |= value
				found = true
				break
			}
		}
		if !found {
			return fmt.Errorf("invalid label '%s'", label)
		}
	}
	*e = mask
	return nil
}

// String implements the fmt.Stringer interface.
func (e WIFI_NETWORK_SECURITY) String() string {
	val, _ := e.MarshalText()
	return string(val)
}
