//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package icarous

import (
	"fmt"
	"strings"
)

type ICAROUS_FMS_STATE uint32

const (
	ICAROUS_FMS_STATE_IDLE     ICAROUS_FMS_STATE = 0
	ICAROUS_FMS_STATE_TAKEOFF  ICAROUS_FMS_STATE = 1
	ICAROUS_FMS_STATE_CLIMB    ICAROUS_FMS_STATE = 2
	ICAROUS_FMS_STATE_CRUISE   ICAROUS_FMS_STATE = 3
	ICAROUS_FMS_STATE_APPROACH ICAROUS_FMS_STATE = 4
	ICAROUS_FMS_STATE_LAND     ICAROUS_FMS_STATE = 5
)

var labels_ICAROUS_FMS_STATE = map[ICAROUS_FMS_STATE]string{
	ICAROUS_FMS_STATE_IDLE:     "ICAROUS_FMS_STATE_IDLE",
	ICAROUS_FMS_STATE_TAKEOFF:  "ICAROUS_FMS_STATE_TAKEOFF",
	ICAROUS_FMS_STATE_CLIMB:    "ICAROUS_FMS_STATE_CLIMB",
	ICAROUS_FMS_STATE_CRUISE:   "ICAROUS_FMS_STATE_CRUISE",
	ICAROUS_FMS_STATE_APPROACH: "ICAROUS_FMS_STATE_APPROACH",
	ICAROUS_FMS_STATE_LAND:     "ICAROUS_FMS_STATE_LAND",
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e ICAROUS_FMS_STATE) MarshalText() ([]byte, error) {
	var names []string
	for mask, label := range labels_ICAROUS_FMS_STATE {
		if e&mask == mask {
			names = append(names, label)
		}
	}
	return []byte(strings.Join(names, " | ")), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *ICAROUS_FMS_STATE) UnmarshalText(text []byte) error {
	labels := strings.Split(string(text), " | ")
	var mask ICAROUS_FMS_STATE
	for _, label := range labels {
		found := false
		for value, l := range labels_ICAROUS_FMS_STATE {
			if l == label {
				mask |= value
				found = true
				break
			}
		}
		if !found {
			return fmt.Errorf("invalid label '%s'", label)
		}
	}
	*e = mask
	return nil
}

// String implements the fmt.Stringer interface.
func (e ICAROUS_FMS_STATE) String() string {
	val, _ := e.MarshalText()
	return string(val)
}
