//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package storm32

import (
	"fmt"
	"strings"
)

// Gimbal manager profiles. Only standard profiles are defined. Any implementation can define its own profile(s) in addition, and should use enum values > 16.
type MAV_STORM32_GIMBAL_MANAGER_PROFILE uint32

const (
	// Default profile. Implementation specific.
	MAV_STORM32_GIMBAL_MANAGER_PROFILE_DEFAULT MAV_STORM32_GIMBAL_MANAGER_PROFILE = 0
	// Not supported/deprecated.
	MAV_STORM32_GIMBAL_MANAGER_PROFILE_CUSTOM MAV_STORM32_GIMBAL_MANAGER_PROFILE = 1
	// Profile with cooperative behavior.
	MAV_STORM32_GIMBAL_MANAGER_PROFILE_COOPERATIVE MAV_STORM32_GIMBAL_MANAGER_PROFILE = 2
	// Profile with exclusive behavior.
	MAV_STORM32_GIMBAL_MANAGER_PROFILE_EXCLUSIVE MAV_STORM32_GIMBAL_MANAGER_PROFILE = 3
	// Profile with priority and cooperative behavior for equal priority.
	MAV_STORM32_GIMBAL_MANAGER_PROFILE_PRIORITY_COOPERATIVE MAV_STORM32_GIMBAL_MANAGER_PROFILE = 4
	// Profile with priority and exclusive behavior for equal priority.
	MAV_STORM32_GIMBAL_MANAGER_PROFILE_PRIORITY_EXCLUSIVE MAV_STORM32_GIMBAL_MANAGER_PROFILE = 5
)

var labels_MAV_STORM32_GIMBAL_MANAGER_PROFILE = map[MAV_STORM32_GIMBAL_MANAGER_PROFILE]string{
	MAV_STORM32_GIMBAL_MANAGER_PROFILE_DEFAULT:              "MAV_STORM32_GIMBAL_MANAGER_PROFILE_DEFAULT",
	MAV_STORM32_GIMBAL_MANAGER_PROFILE_CUSTOM:               "MAV_STORM32_GIMBAL_MANAGER_PROFILE_CUSTOM",
	MAV_STORM32_GIMBAL_MANAGER_PROFILE_COOPERATIVE:          "MAV_STORM32_GIMBAL_MANAGER_PROFILE_COOPERATIVE",
	MAV_STORM32_GIMBAL_MANAGER_PROFILE_EXCLUSIVE:            "MAV_STORM32_GIMBAL_MANAGER_PROFILE_EXCLUSIVE",
	MAV_STORM32_GIMBAL_MANAGER_PROFILE_PRIORITY_COOPERATIVE: "MAV_STORM32_GIMBAL_MANAGER_PROFILE_PRIORITY_COOPERATIVE",
	MAV_STORM32_GIMBAL_MANAGER_PROFILE_PRIORITY_EXCLUSIVE:   "MAV_STORM32_GIMBAL_MANAGER_PROFILE_PRIORITY_EXCLUSIVE",
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e MAV_STORM32_GIMBAL_MANAGER_PROFILE) MarshalText() ([]byte, error) {
	var names []string
	for mask, label := range labels_MAV_STORM32_GIMBAL_MANAGER_PROFILE {
		if e&mask == mask {
			names = append(names, label)
		}
	}
	return []byte(strings.Join(names, " | ")), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *MAV_STORM32_GIMBAL_MANAGER_PROFILE) UnmarshalText(text []byte) error {
	labels := strings.Split(string(text), " | ")
	var mask MAV_STORM32_GIMBAL_MANAGER_PROFILE
	for _, label := range labels {
		found := false
		for value, l := range labels_MAV_STORM32_GIMBAL_MANAGER_PROFILE {
			if l == label {
				mask |= value
				found = true
				break
			}
		}
		if !found {
			return fmt.Errorf("invalid label '%s'", label)
		}
	}
	*e = mask
	return nil
}

// String implements the fmt.Stringer interface.
func (e MAV_STORM32_GIMBAL_MANAGER_PROFILE) String() string {
	val, _ := e.MarshalText()
	return string(val)
}
