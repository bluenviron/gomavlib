//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package storm32

import (
	"fmt"
	"strings"
)

type MAV_STORM32_TUNNEL_PAYLOAD_TYPE uint32

const (
	// Registered for STorM32 gimbal controller. For communication with gimbal or camera.
	MAV_STORM32_TUNNEL_PAYLOAD_TYPE_STORM32_CH1_IN MAV_STORM32_TUNNEL_PAYLOAD_TYPE = 200
	// Registered for STorM32 gimbal controller. For communication with gimbal or camera.
	MAV_STORM32_TUNNEL_PAYLOAD_TYPE_STORM32_CH1_OUT MAV_STORM32_TUNNEL_PAYLOAD_TYPE = 201
	// Registered for STorM32 gimbal controller. For communication with gimbal.
	MAV_STORM32_TUNNEL_PAYLOAD_TYPE_STORM32_CH2_IN MAV_STORM32_TUNNEL_PAYLOAD_TYPE = 202
	// Registered for STorM32 gimbal controller. For communication with gimbal.
	MAV_STORM32_TUNNEL_PAYLOAD_TYPE_STORM32_CH2_OUT MAV_STORM32_TUNNEL_PAYLOAD_TYPE = 203
	// Registered for STorM32 gimbal controller. For communication with camera.
	MAV_STORM32_TUNNEL_PAYLOAD_TYPE_STORM32_CH3_IN MAV_STORM32_TUNNEL_PAYLOAD_TYPE = 204
	// Registered for STorM32 gimbal controller. For communication with camera.
	MAV_STORM32_TUNNEL_PAYLOAD_TYPE_STORM32_CH3_OUT MAV_STORM32_TUNNEL_PAYLOAD_TYPE = 205
)

var labels_MAV_STORM32_TUNNEL_PAYLOAD_TYPE = map[MAV_STORM32_TUNNEL_PAYLOAD_TYPE]string{
	MAV_STORM32_TUNNEL_PAYLOAD_TYPE_STORM32_CH1_IN:  "MAV_STORM32_TUNNEL_PAYLOAD_TYPE_STORM32_CH1_IN",
	MAV_STORM32_TUNNEL_PAYLOAD_TYPE_STORM32_CH1_OUT: "MAV_STORM32_TUNNEL_PAYLOAD_TYPE_STORM32_CH1_OUT",
	MAV_STORM32_TUNNEL_PAYLOAD_TYPE_STORM32_CH2_IN:  "MAV_STORM32_TUNNEL_PAYLOAD_TYPE_STORM32_CH2_IN",
	MAV_STORM32_TUNNEL_PAYLOAD_TYPE_STORM32_CH2_OUT: "MAV_STORM32_TUNNEL_PAYLOAD_TYPE_STORM32_CH2_OUT",
	MAV_STORM32_TUNNEL_PAYLOAD_TYPE_STORM32_CH3_IN:  "MAV_STORM32_TUNNEL_PAYLOAD_TYPE_STORM32_CH3_IN",
	MAV_STORM32_TUNNEL_PAYLOAD_TYPE_STORM32_CH3_OUT: "MAV_STORM32_TUNNEL_PAYLOAD_TYPE_STORM32_CH3_OUT",
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e MAV_STORM32_TUNNEL_PAYLOAD_TYPE) MarshalText() ([]byte, error) {
	var names []string
	for mask, label := range labels_MAV_STORM32_TUNNEL_PAYLOAD_TYPE {
		if e&mask == mask {
			names = append(names, label)
		}
	}
	return []byte(strings.Join(names, " | ")), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *MAV_STORM32_TUNNEL_PAYLOAD_TYPE) UnmarshalText(text []byte) error {
	labels := strings.Split(string(text), " | ")
	var mask MAV_STORM32_TUNNEL_PAYLOAD_TYPE
	for _, label := range labels {
		found := false
		for value, l := range labels_MAV_STORM32_TUNNEL_PAYLOAD_TYPE {
			if l == label {
				mask |= value
				found = true
				break
			}
		}
		if !found {
			return fmt.Errorf("invalid label '%s'", label)
		}
	}
	*e = mask
	return nil
}

// String implements the fmt.Stringer interface.
func (e MAV_STORM32_TUNNEL_PAYLOAD_TYPE) String() string {
	val, _ := e.MarshalText()
	return string(val)
}
