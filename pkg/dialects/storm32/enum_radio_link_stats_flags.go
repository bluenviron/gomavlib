//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package storm32

import (
	"fmt"
	"strconv"
	"strings"
)

// RADIO_LINK_STATS flags (bitmask).
type RADIO_LINK_STATS_FLAGS uint32

const (
	// Rssi are in negative dBm. Values 0..254 corresponds to 0..-254 dBm.
	RADIO_LINK_STATS_FLAGS_RSSI_DBM RADIO_LINK_STATS_FLAGS = 1
)

var labels_RADIO_LINK_STATS_FLAGS = map[RADIO_LINK_STATS_FLAGS]string{
	RADIO_LINK_STATS_FLAGS_RSSI_DBM: "RADIO_LINK_STATS_FLAGS_RSSI_DBM",
}

var values_RADIO_LINK_STATS_FLAGS = map[string]RADIO_LINK_STATS_FLAGS{
	"RADIO_LINK_STATS_FLAGS_RSSI_DBM": RADIO_LINK_STATS_FLAGS_RSSI_DBM,
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e RADIO_LINK_STATS_FLAGS) MarshalText() ([]byte, error) {
	if e == 0 {
		return []byte("0"), nil
	}
	var names []string
	for i := 0; i < 1; i++ {
		mask := RADIO_LINK_STATS_FLAGS(1 << i)
		if e&mask == mask {
			names = append(names, labels_RADIO_LINK_STATS_FLAGS[mask])
		}
	}
	return []byte(strings.Join(names, " | ")), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *RADIO_LINK_STATS_FLAGS) UnmarshalText(text []byte) error {
	labels := strings.Split(string(text), " | ")
	var mask RADIO_LINK_STATS_FLAGS
	for _, label := range labels {
		if value, ok := values_RADIO_LINK_STATS_FLAGS[label]; ok {
			mask |= value
		} else if value, err := strconv.Atoi(label); err == nil {
			mask |= RADIO_LINK_STATS_FLAGS(value)
		} else {
			return fmt.Errorf("invalid label '%s'", label)
		}
	}
	*e = mask
	return nil
}

// String implements the fmt.Stringer interface.
func (e RADIO_LINK_STATS_FLAGS) String() string {
	val, _ := e.MarshalText()
	return string(val)
}
