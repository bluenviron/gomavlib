//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package uavionix

import (
	"fmt"
	"strings"
)

// GPS lataral offset encoding
type UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT uint32

const (
	UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_NO_DATA  UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT = 0
	UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_LEFT_2M  UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT = 1
	UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_LEFT_4M  UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT = 2
	UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_LEFT_6M  UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT = 3
	UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_RIGHT_0M UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT = 4
	UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_RIGHT_2M UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT = 5
	UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_RIGHT_4M UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT = 6
	UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_RIGHT_6M UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT = 7
)

var labels_UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT = map[UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT]string{
	UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_NO_DATA:  "UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_NO_DATA",
	UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_LEFT_2M:  "UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_LEFT_2M",
	UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_LEFT_4M:  "UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_LEFT_4M",
	UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_LEFT_6M:  "UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_LEFT_6M",
	UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_RIGHT_0M: "UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_RIGHT_0M",
	UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_RIGHT_2M: "UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_RIGHT_2M",
	UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_RIGHT_4M: "UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_RIGHT_4M",
	UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_RIGHT_6M: "UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT_RIGHT_6M",
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT) MarshalText() ([]byte, error) {
	var names []string
	for mask, label := range labels_UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT {
		if e&mask == mask {
			names = append(names, label)
		}
	}
	return []byte(strings.Join(names, " | ")), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT) UnmarshalText(text []byte) error {
	labels := strings.Split(string(text), " | ")
	var mask UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT
	for _, label := range labels {
		found := false
		for value, l := range labels_UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT {
			if l == label {
				mask |= value
				found = true
				break
			}
		}
		if !found {
			return fmt.Errorf("invalid label '%s'", label)
		}
	}
	*e = mask
	return nil
}

// String implements the fmt.Stringer interface.
func (e UAVIONIX_ADSB_OUT_CFG_GPS_OFFSET_LAT) String() string {
	val, _ := e.MarshalText()
	return string(val)
}
