//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package uavionix

import (
	"fmt"
	"strings"
)

// Status flags for ADS-B transponder dynamic output
type UAVIONIX_ADSB_RF_HEALTH uint32

const (
	UAVIONIX_ADSB_RF_HEALTH_INITIALIZING UAVIONIX_ADSB_RF_HEALTH = 0
	UAVIONIX_ADSB_RF_HEALTH_OK           UAVIONIX_ADSB_RF_HEALTH = 1
	UAVIONIX_ADSB_RF_HEALTH_FAIL_TX      UAVIONIX_ADSB_RF_HEALTH = 2
	UAVIONIX_ADSB_RF_HEALTH_FAIL_RX      UAVIONIX_ADSB_RF_HEALTH = 16
)

var labels_UAVIONIX_ADSB_RF_HEALTH = map[UAVIONIX_ADSB_RF_HEALTH]string{
	UAVIONIX_ADSB_RF_HEALTH_INITIALIZING: "UAVIONIX_ADSB_RF_HEALTH_INITIALIZING",
	UAVIONIX_ADSB_RF_HEALTH_OK:           "UAVIONIX_ADSB_RF_HEALTH_OK",
	UAVIONIX_ADSB_RF_HEALTH_FAIL_TX:      "UAVIONIX_ADSB_RF_HEALTH_FAIL_TX",
	UAVIONIX_ADSB_RF_HEALTH_FAIL_RX:      "UAVIONIX_ADSB_RF_HEALTH_FAIL_RX",
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e UAVIONIX_ADSB_RF_HEALTH) MarshalText() ([]byte, error) {
	var names []string
	for mask, label := range labels_UAVIONIX_ADSB_RF_HEALTH {
		if e&mask == mask {
			names = append(names, label)
		}
	}
	return []byte(strings.Join(names, " | ")), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *UAVIONIX_ADSB_RF_HEALTH) UnmarshalText(text []byte) error {
	labels := strings.Split(string(text), " | ")
	var mask UAVIONIX_ADSB_RF_HEALTH
	for _, label := range labels {
		found := false
		for value, l := range labels_UAVIONIX_ADSB_RF_HEALTH {
			if l == label {
				mask |= value
				found = true
				break
			}
		}
		if !found {
			return fmt.Errorf("invalid label '%s'", label)
		}
	}
	*e = mask
	return nil
}

// String implements the fmt.Stringer interface.
func (e UAVIONIX_ADSB_RF_HEALTH) String() string {
	val, _ := e.MarshalText()
	return string(val)
}
